// üìÅ controllers/orderController.js
const User = require('../models/User');
const Order = require('../models/Order');
const sendEmail = require('../utils/sendEmail');
const generatePassword = require('../utils/generatePassword');
const bcrypt = require('bcryptjs');
const { generatePDF } = require('../utils/generatePDF');
const path = require('path');
const fs = require('fs');

const createOrder = async (req, res) => {
  const { firstName, lastName, email, phone } = req.body;

  try {
    const existing = await User.findOne({ email });
    if (existing) return res.status(400).json({ error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î' });

    const rawPassword = generatePassword(8);
    const hashedPassword = await bcrypt.hash(rawPassword, 10);

    const newUser = await User.create({ firstName, lastName, email, phone, password: hashedPassword });
    const newOrder = await Order.create({ user: newUser._id });

    await sendEmail(email, '–í–∞—à—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É', `
      <h2>–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</h2>
      <p><strong>–í–∞—à –ª–æ–≥—ñ–Ω:</strong> ${email}</p>
      <p><strong>–í–∞—à –ø–∞—Ä–æ–ª—å:</strong> ${rawPassword}</p>
      <p>–£–≤—ñ–π–¥—ñ—Ç—å —É —Å–≤—ñ–π –∫–∞–±—ñ–Ω–µ—Ç, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É.</p>
    `);

    res.status(201).json({ message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ—à—Ç—É.' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.' });
  }
};

const updateTemplate = async (req, res) => {
  const { orderId } = req.params;
  const { template, blocks } = req.body;

  try {
    const order = await Order.findById(orderId);
    if (!order) return res.status(404).json({ error: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });

    order.selectedTemplate = template;
    if (blocks) {
      order.blocks = blocks;
    }
    await order.save();

    res.status(200).json({ message: '–®–∞–±–ª–æ–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É' });
  }
};

const confirmOrder = async (req, res) => {
  const { orderId } = req.params;

  try {
    const order = await Order.findById(orderId).populate('user');
    if (!order) return res.status(404).json({ error: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });

    const pdfPath = await generatePDF(order);
    const pdfUrl = `/pdfs/${path.basename(pdfPath)}`;

    order.confirmed = true;
    order.pdfUrl = pdfUrl;
    await order.save();

    await sendEmail(order.user.email, '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', `
      <p>–í–∞—à –¥–æ–≥–æ–≤—ñ—Ä —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ. –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–∂–Ω–∞ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:</p>
      <a href="http://growth-tech.com.ua/${pdfUrl}" target="_blank">–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF</a>
    `);

    res.status(200).json({ message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' });
  }
};

const getAllOrders = async (req, res) => {
  try {
    const orders = await Order.find().populate('user', 'firstName lastName email phone');
    res.status(200).json(orders);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å' });
  }
};

module.exports = { createOrder, updateTemplate, confirmOrder, getAllOrders };