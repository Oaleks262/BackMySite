// üìÅ controllers/orderController.js
const User = require('../models/User');
const Order = require('../models/Order');
const sendEmail = require('../utils/sendEmail');
const generatePassword = require('../utils/generatePassword');
const bcrypt = require('bcryptjs');
const { generatePDF } = require('../utils/generatePDF');
const path = require('path');
const fs = require('fs');
const paymentConfig = require('../config/payment');
const { createResponsiveEmailTemplate, createEmailSection, createEmailTable, createEmailButton, createInfoBlock } = require('../utils/emailTemplate');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó email –∑ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞–º–∏ –æ–ø–ª–∞—Ç–∏ (—Ç—ñ–ª—å–∫–∏ –∑ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ—é —Ü—ñ–Ω–æ—é)
const generatePaymentEmailTemplate = (order, user) => {
  const { bankDetails, companyInfo, emailSettings } = paymentConfig;
  
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—É –∞–¥–º—ñ–Ω–æ–º —Ü—ñ–Ω—É
  const totalPrice = order.amount;
  
  if (!totalPrice || totalPrice <= 0) {
    throw new Error('–¶—ñ–Ω–∞ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
  }
  
  const templateNames = {
    'single': '–û–¥–Ω–æ—Å—Ç–æ—Ä—ñ–Ω–∫–æ–≤–∏–π —Å–∞–π—Ç',
    'landing': '–õ–µ–Ω–¥—ñ–Ω–≥',
    'blog': '–ë–ª–æ–≥ –∑ CMS'
  };
  
  const featureNames = {
    'ecommerce': '–ï-–∫–æ–º–µ—Ä—Å —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª',
    'booking': '–°–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è',
    'analytics': '–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–∞ –º–µ—Ç—Ä–∏–∫–∏',
    'seo': 'SEO –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è'
  };
  
  let additionalFeaturesHtml = '';
  const additionalFeatures = order.blocks?.additionalFeatures || {};
  const selectedFeatures = Object.keys(additionalFeatures).filter(feature => additionalFeatures[feature]);
  
  if (selectedFeatures.length > 0) {
    additionalFeaturesHtml = '<h4 class="email-subtitle" style="color: #2c3e50; margin-top: 15px; font-size: 14px;">–î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:</h4><ul style="margin: 10px 0; padding-left: 20px; line-height: 1.6;">';
    selectedFeatures.forEach(feature => {
      if (featureNames[feature]) {
        additionalFeaturesHtml += `<li style="margin-bottom: 5px; font-size: 14px;">${featureNames[feature]}</li>`;
      }
    });
    additionalFeaturesHtml += '</ul>';
  }

  // –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ—Ç–∞–ª—å–Ω—É —Å–µ–∫—Ü—ñ—é
  const greetingSection = createEmailSection(`
    <h2 class="email-subtitle" style="color: #27ae60; margin-top: 0; font-size: 18px;">–í—ñ—Ç–∞—î–º–æ, ${user.firstName} ${user.lastName}!</h2>
    <p class="email-text" style="margin: 10px 0; line-height: 1.6; font-size: 14px;">
      –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –≤–∞—à–æ–≥–æ —Å–∞–π—Ç—É. –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞–º–∏ –Ω–∏–∂—á–µ.
    </p>
  `, '#e8f5e8');

  // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ–∫—Ü—ñ—é –∑ –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  const orderDetailsTable = createEmailTable([
    ['–¢–∏–ø —Å–∞–π—Ç—É:', templateNames[order.tariffType] || order.tariffType],
    [`<strong style="font-size: 16px;">–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:</strong>`, `<span class="total-price" style="font-weight: bold; font-size: 18px; color: #e74c3c;">${totalPrice} ${bankDetails.currency}</span>`]
  ]);

  const orderDetailsSection = createEmailSection(`
    <h3 class="email-subtitle" style="color: #2c3e50; margin-top: 0; font-size: 16px;">üìã –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</h3>
    ${orderDetailsTable}
    ${additionalFeaturesHtml}
  `, '#f8f9fa');

  // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ–∫—Ü—ñ—é –∑ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏
  const paymentDetailsTable = createEmailTable([
    ['–û–¥–µ—Ä–∂—É–≤–∞—á:', `<span class="monospace-text" style="font-family: monospace; font-size: 13px; word-break: break-word;">${bankDetails.recipient}</span>`],
    ['IBAN:', `<span class="monospace-text" style="font-family: monospace; background-color: #fff; padding: 8px; border-radius: 4px; font-size: 13px; word-break: break-all; letter-spacing: 1px; display: inline-block;">${bankDetails.iban}</span>`],
    ['–ë–∞–Ω–∫:', `<span class="monospace-text" style="font-family: monospace; font-size: 13px; word-break: break-word;">${bankDetails.bank}</span>`],
    ['–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É:', `<span class="monospace-text" style="font-family: monospace; font-size: 13px; word-break: break-word; line-height: 1.4;">–û–ø–ª–∞—Ç–∞ –∑–∞ —Ä–æ–∑—Ä–æ–±–∫—É —Å–∞–π—Ç—É. –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #${order._id.toString().slice(-6)}</span>`],
    ['–°—É–º–∞:', `<span class="total-price monospace-text" style="font-family: monospace; font-size: 16px; color: #e74c3c; font-weight: bold;">${totalPrice} ${bankDetails.currency}</span>`]
  ]);

  const paymentDetailsSection = createEmailSection(`
    <h3 class="email-subtitle" style="color: #856404; margin-top: 0; font-size: 16px;">üí∞ –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏:</h3>
    ${paymentDetailsTable}
  `, '#fff3cd', '#ffeaa7');

  // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π –±–ª–æ–∫
  const infoSection = createInfoBlock('‚ÑπÔ∏è –í–∞–∂–ª–∏–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:', `
    <ul style="margin: 10px 0; padding-left: 20px; line-height: 1.6;">
      <li style="margin-bottom: 5px;">–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–∫–∞ —Å–∞–π—Ç—É —Ä–æ–∑–ø–æ—á–Ω–µ—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ</li>
      <li style="margin-bottom: 5px;">–¢–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${emailSettings.deliveryDays}</li>
      <li style="margin-bottom: 5px;">–í–∏ –æ—Ç—Ä–∏–º–∞–µ—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</li>
      <li style="margin-bottom: 5px;">–ü—Ä–∏ –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—ñ –ø–∏—Ç–∞–Ω—å –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –∑–∞ —Ü–∏–º email –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º</li>
    </ul>
  `, 'info');

  // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —Å–µ–∫—Ü—ñ—ó —Ä–∞–∑–æ–º
  const emailContent = greetingSection + orderDetailsSection + paymentDetailsSection + infoSection;

  // –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π email template
  return createResponsiveEmailTemplate(
    'üí≥ –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏',
    emailContent,
    {
      footerText: '–ó –ø–æ–≤–∞–≥–æ—é,',
      footerEmail: companyInfo.email,
      footerWebsite: companyInfo.website.replace('https://', ''),
      companyName: companyInfo.name
    }
  );
};

const createOrder = async (req, res) => {
  const { firstName, lastName, email, phone, tariffType } = req.body;

  // Input validation
  if (!firstName || !lastName || !email || !phone) {
    return res.status(400).json({ error: '–í—Å—ñ –ø–æ–ª—è —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º–∏' });
  }

  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
    return res.status(400).json({ error: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email' });
  }

  if (firstName.length < 2 || lastName.length < 2) {
    return res.status(400).json({ error: '–Ü–º\'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –º–∞—é—Ç—å –±—É—Ç–∏ –¥–æ–≤—à–µ 2 —Å–∏–º–≤–æ–ª—ñ–≤' });
  }

  if (phone.length < 10) {
    return res.status(400).json({ error: '–¢–µ–ª–µ—Ñ–æ–Ω –º–∞—î –±—É—Ç–∏ –¥–æ–≤—à–µ 10 —Å–∏–º–≤–æ–ª—ñ–≤' });
  }

  try {
    const existing = await User.findOne({ email });
    if (existing) return res.status(400).json({ error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î' });

    const rawPassword = generatePassword(8);
    const hashedPassword = await bcrypt.hash(rawPassword, 10);

    const newUser = await User.create({ firstName, lastName, email, phone, password: hashedPassword });
    const newOrder = await Order.create({ user: newUser._id, tariffType });
    
    console.log('New user created:', newUser.email, 'with password:', rawPassword);
    console.log('New order created:', newOrder._id);

    try {
      // Send email to customer
      const customerEmailContent = createEmailSection(`
        <h2 class="email-subtitle" style="color: #26B26A; margin-top: 0; font-size: 18px;">–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</h2>
        <p class="email-text" style="margin: 10px 0; font-size: 14px; line-height: 1.6;">
          –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –¥–∞–Ω—ñ –Ω–∏–∂—á–µ –¥–ª—è –≤—Ö–æ–¥—É –≤ –æ—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç.
        </p>
      `, '#e8f5e8') + createInfoBlock('üîë –î–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É:', `
        <table style="width: 100%; margin: 10px 0;">
          <tr style="border-bottom: 1px solid #ddd;">
            <td style="padding: 8px 0; font-weight: bold; font-size: 14px;">–õ–æ–≥—ñ–Ω (Email):</td>
            <td style="padding: 8px 0; font-size: 14px; word-break: break-word;">${email}</td>
          </tr>
          <tr>
            <td style="padding: 8px 0; font-weight: bold; font-size: 14px;">–ü–∞—Ä–æ–ª—å:</td>
            <td style="padding: 8px 0; font-family: monospace; font-size: 16px; font-weight: bold; color: #e74c3c;">${rawPassword}</td>
          </tr>
        </table>
      `, 'warning') + createEmailSection(`
        <p class="email-text" style="margin: 0; font-size: 14px; text-align: center;">
          <strong>–£–≤—ñ–π–¥—ñ—Ç—å —É —Å–≤—ñ–π –∫–∞–±—ñ–Ω–µ—Ç, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É.</strong>
        </p>
      `, '#f8f9fa');

      const customerEmailTemplate = createResponsiveEmailTemplate(
        'üéâ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ',
        customerEmailContent
      );

      await sendEmail(email, '–í–∞—à—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É', customerEmailTemplate);
      console.log('Customer email sent successfully for:', email);
    } catch (emailError) {
      console.error('Customer email sending failed:', emailError);
    }

    try {
      // Send notification to admin
      const adminEmailContent = createEmailSection(`
        <h2 class="email-subtitle" style="color: #e74c3c; margin-top: 0; font-size: 18px;">üÜï –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</h2>
        <p class="email-text" style="margin: 10px 0; font-size: 14px; line-height: 1.6;">
          –ù–∞ —Å–∞–π—Ç—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–µ—Ç–∞–ª—ñ –Ω–∏–∂—á–µ.
        </p>
      `, '#fdeaea') + createEmailSection(`
        <h3 class="email-subtitle" style="color: #2c3e50; margin-top: 0; font-size: 16px;">üë§ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞:</h3>
        <table style="width: 100%; margin: 10px 0;">
          <tr style="border-bottom: 1px solid #ddd;">
            <td style="padding: 8px 0; font-weight: bold; font-size: 14px;">–ö–ª—ñ—î–Ω—Ç:</td>
            <td style="padding: 8px 0; font-size: 14px;">${firstName} ${lastName}</td>
          </tr>
          <tr style="border-bottom: 1px solid #ddd;">
            <td style="padding: 8px 0; font-weight: bold; font-size: 14px;">Email:</td>
            <td style="padding: 8px 0; font-size: 14px; word-break: break-word;">${email}</td>
          </tr>
          <tr style="border-bottom: 1px solid #ddd;">
            <td style="padding: 8px 0; font-weight: bold; font-size: 14px;">–¢–µ–ª–µ—Ñ–æ–Ω:</td>
            <td style="padding: 8px 0; font-size: 14px;">${phone}</td>
          </tr>
          <tr style="border-bottom: 1px solid #ddd;">
            <td style="padding: 8px 0; font-weight: bold; font-size: 14px;">ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</td>
            <td style="padding: 8px 0; font-family: monospace; font-size: 14px;">${newOrder._id}</td>
          </tr>
          <tr>
            <td style="padding: 8px 0; font-weight: bold; font-size: 14px;">–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:</td>
            <td style="padding: 8px 0; font-size: 14px;">${new Date().toLocaleString('uk-UA')}</td>
          </tr>
        </table>
      `, '#f8f9fa') + createInfoBlock('‚ö° –î—ñ—è –ø–æ—Ç—Ä—ñ–±–Ω–∞:', `
        –£–≤—ñ–π–¥—ñ—Ç—å –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ–Ω–∏.
      `, 'warning');

      const adminEmailTemplate = createResponsiveEmailTemplate(
        'üÜï –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç—ñ',
        adminEmailContent,
        { footerText: '–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å Growth Tech' }
      );

      await sendEmail(process.env.SMTP_EMAIL, '–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç—ñ', adminEmailTemplate);
      console.log('Admin notification sent successfully');
    } catch (emailError) {
      console.error('Admin notification sending failed:', emailError);
    }

    res.status(201).json({ 
      message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ—à—Ç—É.',
      orderId: newOrder._id,
      userId: newUser._id
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.' });
  }
};

const updateTemplate = async (req, res) => {
  const { template, blocks } = req.body;
  const userId = req.user.userId;

  console.log('Update template request:', { userId, template, blocks: Object.keys(blocks || {}) });

  try {
    let order = await Order.findOne({ user: userId });
    const user = await User.findById(userId);
    
    if (!order) {
      // Create new order if doesn't exist
      order = await Order.create({ 
        user: userId,
        selectedTemplate: template,
        blocks: blocks,
        status: 'pending_payment'
      });
      console.log('Created new order:', order._id);
    } else {
      // Update existing order
      order.selectedTemplate = template;
      order.blocks = blocks;
      order.status = 'pending_payment';
      await order.save();
      console.log('Updated existing order:', order._id);
    }

    // Send notification to admin about template update
    try {
      const templateUpdateEmailContent = createEmailSection(`
        <h2 class="email-subtitle" style="color: #27ae60; margin-top: 0; font-size: 18px;">‚úÖ –ö–ª—ñ—î–Ω—Ç –∑–∞–ø–æ–≤–Ω–∏–≤ –≤—Å—ñ –¥–∞–Ω—ñ!</h2>
        <p class="email-text" style="margin: 10px 0; font-size: 14px; line-height: 1.6;">
          –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≥–æ—Ç–æ–≤–µ –¥–æ —Ä–æ–∑–≥–ª—è–¥—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        </p>
      `, '#e8f5e8') + createEmailSection(`
        <h3 class="email-subtitle" style="color: #2c3e50; margin-top: 0; font-size: 16px;">üë§ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞:</h3>
        <table style="width: 100%; margin: 10px 0;">
          <tr style="border-bottom: 1px solid #ddd;">
            <td style="padding: 8px 0; font-weight: bold; font-size: 14px;">–ö–ª—ñ—î–Ω—Ç:</td>
            <td style="padding: 8px 0; font-size: 14px;">${user.firstName} ${user.lastName}</td>
          </tr>
          <tr style="border-bottom: 1px solid #ddd;">
            <td style="padding: 8px 0; font-weight: bold; font-size: 14px;">Email:</td>
            <td style="padding: 8px 0; font-size: 14px; word-break: break-word;">${user.email}</td>
          </tr>
          <tr style="border-bottom: 1px solid #ddd;">
            <td style="padding: 8px 0; font-weight: bold; font-size: 14px;">–¢–µ–ª–µ—Ñ–æ–Ω:</td>
            <td style="padding: 8px 0; font-size: 14px;">${user.phone}</td>
          </tr>
          <tr style="border-bottom: 1px solid #ddd;">
            <td style="padding: 8px 0; font-weight: bold; font-size: 14px;">ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</td>
            <td style="padding: 8px 0; font-family: monospace; font-size: 14px;">${order._id}</td>
          </tr>
          <tr style="border-bottom: 1px solid #ddd;">
            <td style="padding: 8px 0; font-weight: bold; font-size: 14px;">–û–±—Ä–∞–Ω–∏–π —à–∞–±–ª–æ–Ω:</td>
            <td style="padding: 8px 0; font-size: 14px;">${template}</td>
          </tr>
          <tr style="border-bottom: 1px solid #ddd;">
            <td style="padding: 8px 0; font-weight: bold; font-size: 14px;">–°—Ç–∞—Ç—É—Å:</td>
            <td style="padding: 8px 0; font-size: 14px;">–ß–µ—Ä–Ω–µ—Ç–∫–∞</td>
          </tr>
          <tr>
            <td style="padding: 8px 0; font-weight: bold; font-size: 14px;">–ß–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:</td>
            <td style="padding: 8px 0; font-size: 14px;">${new Date().toLocaleString('uk-UA')}</td>
          </tr>
        </table>
      `, '#f8f9fa') + createInfoBlock('‚ö° –î—ñ—è –ø–æ—Ç—Ä—ñ–±–Ω–∞:', `
        –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≥–æ—Ç–æ–≤–µ –¥–æ —Ä–æ–∑–≥–ª—è–¥—É. –£–≤—ñ–π–¥—ñ—Ç—å –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å, –æ–∑–Ω–∞–π–æ–º—Ç–µ—Å—å –∑ –º–∞—Ç–µ—Ä—ñ–∞–ª–∞–º–∏ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Ü—ñ–Ω—É. –ü—ñ—Å–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ–Ω–∏ –∫–ª—ñ—î–Ω—Ç –æ—Ç—Ä–∏–º–∞—î —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏.
      `, 'warning');

      const templateUpdateEmailTemplate = createResponsiveEmailTemplate(
        '‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≥–æ—Ç–æ–≤–µ –¥–æ —Ä–æ–∑–≥–ª—è–¥—É',
        templateUpdateEmailContent,
        { footerText: '–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å Growth Tech' }
      );

      await sendEmail(process.env.SMTP_EMAIL, '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≥–æ—Ç–æ–≤–µ –¥–æ —Ä–æ–∑–≥–ª—è–¥—É', templateUpdateEmailTemplate);
      console.log('Admin notification sent about order ready for review');
    } catch (emailError) {
      console.error('Admin notification sending failed:', emailError);
    }

    res.status(200).json({ 
      message: '–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ–Ω–∏.', 
      order,
      status: 'draft'
    });
  } catch (error) {
    console.error('Update template error:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É' });
  }
};

const getMyOrder = async (req, res) => {
  const userId = req.user.userId;

  try {
    const order = await Order.findOne({ user: userId }).populate('user', 'firstName lastName email phone');
    
    if (!order) {
      return res.status(404).json({ error: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    res.status(200).json(order);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' });
  }
};

// –ù–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ–Ω–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–≤—ñ–∑–∏—Ç—ñ–≤
const setPriceAndSendPayment = async (req, res) => {
  const { orderId } = req.params;
  const { amount } = req.body;
  
  console.log('setPriceAndSendPayment –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è orderId:', orderId, 'amount:', amount);

  try {
    const order = await Order.findById(orderId).populate('user');
    if (!order) return res.status(404).json({ error: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });

    if (!amount || amount <= 0) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –∫–æ—Ä–µ–∫—Ç–Ω—É —Ü—ñ–Ω—É' });
    }

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ü—ñ–Ω—É —Ç–∞ —Å—Ç–∞—Ç—É—Å
    order.amount = amount;
    order.status = 'pending_payment';
    order.paymentEmailSent = true; // –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ email –∑ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞–º–∏ –≤–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ
    await order.save();

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email –∑ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞–º–∏ –æ–ø–ª–∞—Ç–∏
    try {
      const paymentEmailHtml = generatePaymentEmailTemplate(order, order.user);
      await sendEmail(order.user.email, '–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏', paymentEmailHtml);
      console.log('Payment email sent to client:', order.user.email);
    } catch (emailError) {
      console.error('Payment email sending failed:', emailError);
      return res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –∑ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞–º–∏' });
    }

    res.status(200).json({ 
      message: '–¶—ñ–Ω—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –∫–ª—ñ—î–Ω—Ç –æ—Ç—Ä–∏–º–∞–≤ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏',
      order: {
        ...order.toObject(),
        amount: amount
      }
    });
  } catch (error) {
    console.error('setPriceAndSendPayment error:', error);
    res.status(500).json({ 
      error: '–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ–Ω–∏', 
      details: error.message
    });
  }
};

const confirmOrder = async (req, res) => {
  const { orderId } = req.params;
  
  console.log('confirmOrder –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è orderId:', orderId);
  console.log('Environment check:', {
    nodeEnv: process.env.NODE_ENV,
    hasSmtpEmail: !!process.env.SMTP_EMAIL,
    hasSmtpPass: !!process.env.SMTP_PASS
  });

  try {
    console.log('Fetching order from database...');
    const order = await Order.findById(orderId).populate('user');
    if (!order) return res.status(404).json({ error: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    
    console.log('Order found:', { id: order._id, amount: order.amount, hasUser: !!order.user });

    if (!order.amount || order.amount <= 0) {
      return res.status(400).json({ error: '–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ü—ñ–Ω—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' });
    }

    console.log('Starting PDF generation...');
    const pdfPath = await generatePDF(order);
    console.log('PDF generated successfully:', pdfPath);
    const pdfUrl = `/pdfs/${path.basename(pdfPath)}`;

    order.confirmed = true;
    order.pdfUrl = pdfUrl;
    await order.save();

    const confirmationEmailContent = createEmailSection(`
      <h2 class="email-subtitle" style="color: #27ae60; margin-top: 0; font-size: 18px;">üéâ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!</h2>
      <p class="email-text" style="margin: 10px 0; font-size: 14px; line-height: 1.6;">
        –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –î–æ–≥–æ–≤—ñ—Ä —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.
      </p>
    `, '#e8f5e8') + createInfoBlock('üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∏:', `
      <p style="margin: 10px 0; text-align: center;">
        –í–∞—à –¥–æ–≥–æ–≤—ñ—Ä –≥–æ—Ç–æ–≤–∏–π –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:
      </p>
    `, 'info') + createEmailButton(
      'üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–æ–≥–æ–≤—ñ—Ä (PDF)',
      `http://growth-tech.com.ua/${pdfUrl}`,
      '#e74c3c'
    ) + createEmailSection(`
      <p class="email-text" style="margin: 0; font-size: 14px; text-align: center;">
        –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ —Ü–µ–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Å–≤–æ—ó—Ö –∑–∞–ø–∏—Å—ñ–≤.
      </p>
    `, '#f8f9fa');

    const confirmationEmailTemplate = createResponsiveEmailTemplate(
      'üìã –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
      confirmationEmailContent
    );

    await sendEmail(order.user.email, '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', confirmationEmailTemplate);

    res.status(200).json({ message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ' });
  } catch (error) {
    console.error('–î–µ—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ confirmOrder:', error);
    console.error('Stack trace:', error.stack);
    res.status(500).json({ 
      error: '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', 
      details: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
};

const getAllOrders = async (req, res) => {
  try {
    const orders = await Order.find().populate('user', 'firstName lastName email phone').sort({ createdAt: -1 });
    console.log(`Retrieved ${orders.length} orders for admin`);
    res.status(200).json(orders);
  } catch (error) {
    console.error('Get all orders error:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å' });
  }
};

const updateOrderStatus = async (req, res) => {
  const { orderId } = req.params;
  const { status } = req.body;
  
  console.log('updateOrderStatus –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è orderId:', orderId, '–Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å:', status);
  
  const validStatuses = ['draft', 'pending_payment', 'paid', 'in_progress', 'completed', 'cancelled', 'payment_failed'];
  
  if (!validStatuses.includes(status)) {
    return res.status(400).json({ error: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' });
  }

  try {
    const order = await Order.findById(orderId).populate('user');
    if (!order) return res.status(404).json({ error: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });

    const oldStatus = order.status;
    order.status = status;
    await order.save();

    console.log(`–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderId} –∑–º—ñ–Ω–µ–Ω–æ –∑ ${oldStatus} –Ω–∞ ${status}`);

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É
    const statusMessages = {
      'draft': '–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ —ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Å—Ç–∞—Ç—É—Å—ñ —á–µ—Ä–Ω–µ—Ç–∫–∏',
      'in_progress': '–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ –≤ —Ä–æ–±–æ—Ç—É! –ú–∏ –ø–æ—á–∞–ª–∏ —Ä–æ–∑—Ä–æ–±–∫—É –≤–∞—à–æ–≥–æ —Å–∞–π—Ç—É',
      'completed': '–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–∞—à —Å–∞–π—Ç –≥–æ—Ç–æ–≤–∏–π',
      'cancelled': '–ù–∞ –∂–∞–ª—å, –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ',
      'pending_payment': '–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É—î –æ–ø–ª–∞—Ç–∏',
      'paid': '–î—è–∫—É—î–º–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º',
      'payment_failed': '–ü–æ–º–∏–ª–∫–∞ –æ–ø–ª–∞—Ç–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑'
    };

    const statusTranslations = {
      'draft': '–ß–µ—Ä–Ω–µ—Ç–∫–∞',
      'in_progress': '–í —Ä–æ–±–æ—Ç—ñ',
      'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
      'cancelled': '–°–∫–∞—Å–æ–≤–∞–Ω–æ',
      'pending_payment': '–û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç–∏',
      'paid': '–û–ø–ª–∞—á–µ–Ω–æ',
      'payment_failed': '–ü–æ–º–∏–ª–∫–∞ –æ–ø–ª–∞—Ç–∏'
    };

    try {
      const statusUpdateEmailContent = createEmailSection(`
        <h2 class="email-subtitle" style="color: #2c3e50; margin-top: 0; font-size: 18px;">üìä –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–æ</h2>
        <p class="email-text" style="margin: 10px 0; font-size: 14px; line-height: 1.6;">
          ${statusMessages[status]}
        </p>
      `, '#f8f9fa') + createEmailSection(`
        <h3 class="email-subtitle" style="color: #2c3e50; margin-top: 0; font-size: 16px;">üìã –î–µ—Ç–∞–ª—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:</h3>
        <table style="width: 100%; margin: 10px 0;">
          <tr style="border-bottom: 1px solid #ddd;">
            <td style="padding: 8px 0; font-weight: bold; font-size: 14px;">ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</td>
            <td style="padding: 8px 0; font-family: monospace; font-size: 14px;">${order._id}</td>
          </tr>
          <tr>
            <td style="padding: 8px 0; font-weight: bold; font-size: 14px;">–ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å:</td>
            <td style="padding: 8px 0; font-size: 14px; font-weight: bold; color: #27ae60;">${statusTranslations[status] || status}</td>
          </tr>
        </table>
      `, '#e8f5e8') + createInfoBlock('üí° –©–æ –¥–∞–ª—ñ?', `
        –£–≤—ñ–π–¥—ñ—Ç—å —É —Å–≤—ñ–π –∫–∞–±—ñ–Ω–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
      `, 'info');

      let emailContent = statusUpdateEmailContent;

      // –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å "pending_payment" —ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ —â–µ –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ
      if (status === 'pending_payment' && !order.paymentEmailSent && order.amount) {
        try {
          const paymentEmailHtml = generatePaymentEmailTemplate(order, order.user);
          await sendEmail(order.user.email, '–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏', paymentEmailHtml);
          
          // –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ email –∑ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞–º–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ
          order.paymentEmailSent = true;
          await order.save();
          
          console.log('Payment email sent to client via status update:', order.user.email);
          return res.status(200).json({ 
            message: '–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏',
            order: {
              ...order.toObject(),
              oldStatus,
              newStatus: status
            }
          });
        } catch (emailError) {
          console.error('Payment email sending failed:', emailError);
          // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –∑–≤–∏—á–∞–π–Ω–∏–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É
        }
      }

      // –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å "completed", –¥–æ–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–≥—É–∫
      if (status === 'completed') {
        const reviewUrl = `${process.env.FRONTEND_URL || 'http://localhost:5000'}/review/${order._id}`;
        const reviewSection = createInfoBlock('üåü –ó–∞–ª–∏—à—Ç–µ –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –Ω–∞—à—É —Ä–æ–±–æ—Ç—É!', `
          <p style="margin: 10px 0; text-align: center;">
            –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ú–∏ –±—É–¥–µ–º–æ –¥—É–∂–µ –≤–¥—è—á–Ω—ñ, —è–∫—â–æ –≤–∏ –∑–∞–ª–∏—à–∏—Ç–µ –≤—ñ–¥–≥—É–∫ –ø—Ä–æ —è–∫—ñ—Å—Ç—å –Ω–∞—à–æ—ó —Ä–æ–±–æ—Ç–∏.
          </p>
        `, 'success') + createEmailButton(
          '‚≠ê –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫',
          reviewUrl,
          '#27ae60'
        ) + createEmailSection(`
          <p style="font-size: 12px; color: #666; margin: 0; text-align: center;">
            –í–∞—à –≤—ñ–¥–≥—É–∫ –¥–æ–ø–æ–º–æ–∂–µ —ñ–Ω—à–∏–º –∫–ª—ñ—î–Ω—Ç–∞–º –¥–æ–≤—ñ—Ä–∏—Ç–∏—Å—è –Ω–∞–º —Ç–∞ –ø–æ–∫—Ä–∞—â–∏—Ç—å —è–∫—ñ—Å—Ç—å –Ω–∞—à–∏—Ö –ø–æ—Å–ª—É–≥.
          </p>
        `, '#f8f9fa');
        
        emailContent += reviewSection;
      }

      const finalEmailTemplate = createResponsiveEmailTemplate(
        'üìä –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
        emailContent
      );

      await sendEmail(order.user.email, '–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', finalEmailTemplate);
      console.log('Status update notification sent to client');
    } catch (emailError) {
      console.error('Status update notification failed:', emailError);
    }

    res.status(200).json({ 
      message: '–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ',
      order: {
        ...order.toObject(),
        oldStatus,
        newStatus: status
      }
    });
  } catch (error) {
    console.error('Update order status error:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' });
  }
};

module.exports = { createOrder, updateTemplate, getMyOrder, confirmOrder, getAllOrders, updateOrderStatus, setPriceAndSendPayment };