// üìÅ controllers/orderController.js
const User = require('../models/User');
const Order = require('../models/Order');
const sendEmail = require('../utils/sendEmail');
const generatePassword = require('../utils/generatePassword');
const bcrypt = require('bcryptjs');
const { generatePDF } = require('../utils/generatePDF');
const path = require('path');
const fs = require('fs');
const paymentConfig = require('../config/payment');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó email –∑ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞–º–∏ –æ–ø–ª–∞—Ç–∏
const generatePaymentEmailTemplate = (order, user) => {
  const { pricing, bankDetails, companyInfo, emailSettings } = paymentConfig;
  
  const basePrice = pricing.tariffs[order.tariffType] || pricing.tariffs.single;
  let totalPrice = basePrice;
  
  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
  const additionalFeatures = order.blocks?.additionalFeatures || {};
  
  let additionalCost = 0;
  Object.keys(additionalFeatures).forEach(feature => {
    if (additionalFeatures[feature] && pricing.additionalFeatures[feature]) {
      additionalCost += pricing.additionalFeatures[feature];
    }
  });
  
  totalPrice += additionalCost;
  
  const templateNames = {
    'single': '–û–¥–Ω–æ—Å—Ç–æ—Ä—ñ–Ω–∫–æ–≤–∏–π —Å–∞–π—Ç',
    'landing': '–õ–µ–Ω–¥—ñ–Ω–≥',
    'blog': '–ë–ª–æ–≥ –∑ CMS'
  };
  
  const featureNames = {
    'ecommerce': '–ï-–∫–æ–º–µ—Ä—Å —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª',
    'booking': '–°–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è',
    'analytics': '–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–∞ –º–µ—Ç—Ä–∏–∫–∏',
    'seo': 'SEO –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è'
  };
  
  let additionalFeaturesHtml = '';
  if (additionalCost > 0) {
    additionalFeaturesHtml = '<h3>–î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:</h3><ul>';
    Object.keys(additionalFeatures).forEach(feature => {
      if (additionalFeatures[feature] && pricing.additionalFeatures[feature]) {
        additionalFeaturesHtml += `<li>${featureNames[feature]} - ${pricing.additionalFeatures[feature]} ${bankDetails.currency}</li>`;
      }
    });
    additionalFeaturesHtml += '</ul>';
  }
  
  return `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
      <div style="background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
        <h1 style="color: #2c3e50; text-align: center; margin-bottom: 30px;">üí≥ –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏</h1>
        
        <div style="background-color: #e8f5e8; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
          <h2 style="color: #27ae60; margin-top: 0;">–í—ñ—Ç–∞—î–º–æ, ${user.firstName} ${user.lastName}!</h2>
          <p style="margin: 10px 0; line-height: 1.6;">–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –≤–∞—à–æ–≥–æ —Å–∞–π—Ç—É. –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞–º–∏ –Ω–∏–∂—á–µ.</p>
        </div>
        
        <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
          <h3 style="color: #2c3e50; margin-top: 0;">üìã –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</h3>
          <table style="width: 100%; border-collapse: collapse;">
            <tr style="border-bottom: 1px solid #ddd;">
              <td style="padding: 8px 0; font-weight: bold;">–¢–∏–ø —Å–∞–π—Ç—É:</td>
              <td style="padding: 8px 0;">${templateNames[order.tariffType] || order.tariffType}</td>
            </tr>
            <tr style="border-bottom: 1px solid #ddd;">
              <td style="padding: 8px 0; font-weight: bold;">–ë–∞–∑–æ–≤–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:</td>
              <td style="padding: 8px 0;">${basePrice} ${bankDetails.currency}</td>
            </tr>
            ${additionalCost > 0 ? `
            <tr style="border-bottom: 1px solid #ddd;">
              <td style="padding: 8px 0; font-weight: bold;">–î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:</td>
              <td style="padding: 8px 0;">${additionalCost} ${bankDetails.currency}</td>
            </tr>` : ''}
            <tr style="border-bottom: 2px solid #2c3e50;">
              <td style="padding: 8px 0; font-weight: bold; font-size: 18px;">–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:</td>
              <td style="padding: 8px 0; font-weight: bold; font-size: 18px; color: #e74c3c;">${totalPrice} ${bankDetails.currency}</td>
            </tr>
          </table>
          ${additionalFeaturesHtml}
        </div>
        
        <div style="background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
          <h3 style="color: #856404; margin-top: 0;">üí∞ –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏:</h3>
          <table style="width: 100%; border-collapse: collapse;">
            <tr style="border-bottom: 1px solid #ddd;">
              <td style="padding: 12px 0; font-weight: bold; width: 40%;">–û–¥–µ—Ä–∂—É–≤–∞—á:</td>
              <td style="padding: 12px 0; font-family: monospace;">${bankDetails.recipient}</td>
            </tr>
            <tr style="border-bottom: 1px solid #ddd;">
              <td style="padding: 12px 0; font-weight: bold;">IBAN:</td>
              <td style="padding: 12px 0; font-family: monospace; background-color: #fff; padding: 8px; border-radius: 4px;">${bankDetails.iban}</td>
            </tr>
            <tr style="border-bottom: 1px solid #ddd;">
              <td style="padding: 12px 0; font-weight: bold;">–ë–∞–Ω–∫:</td>
              <td style="padding: 12px 0; font-family: monospace;">${bankDetails.bank}</td>
            </tr>
            <tr style="border-bottom: 1px solid #ddd;">
              <td style="padding: 12px 0; font-weight: bold;">–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É:</td>
              <td style="padding: 12px 0; font-family: monospace;">–û–ø–ª–∞—Ç–∞ –∑–∞ —Ä–æ–∑—Ä–æ–±–∫—É —Å–∞–π—Ç—É. –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #${order._id.toString().slice(-6)}</td>
            </tr>
            <tr>
              <td style="padding: 12px 0; font-weight: bold;">–°—É–º–∞:</td>
              <td style="padding: 12px 0; font-family: monospace; font-size: 18px; color: #e74c3c; font-weight: bold;">${totalPrice} ${bankDetails.currency}</td>
            </tr>
          </table>
        </div>
        
        <div style="background-color: #d1ecf1; border: 1px solid #bee5eb; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
          <h4 style="color: #0c5460; margin-top: 0;">‚ÑπÔ∏è –í–∞–∂–ª–∏–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</h4>
          <ul style="margin: 10px 0; padding-left: 20px; line-height: 1.6;">
            <li>–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–∫–∞ —Å–∞–π—Ç—É —Ä–æ–∑–ø–æ—á–Ω–µ—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ</li>
            <li>–¢–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${emailSettings.deliveryDays}</li>
            <li>–í–∏ –æ—Ç—Ä–∏–º–∞–µ—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</li>
            <li>–ü—Ä–∏ –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—ñ –ø–∏—Ç–∞–Ω—å –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –∑–∞ —Ü–∏–º email –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º</li>
          </ul>
        </div>
        
        <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd;">
          <p style="color: #7f8c8d; margin: 5px 0;">–ó –ø–æ–≤–∞–≥–æ—é,</p>
          <p style="color: #2c3e50; font-weight: bold; margin: 5px 0;">–ö–æ–º–∞–Ω–¥–∞ ${companyInfo.name}</p>
          <p style="color: #7f8c8d; font-size: 14px; margin: 5px 0;">üìß ${companyInfo.email}</p>
          <p style="color: #7f8c8d; font-size: 14px; margin: 5px 0;">üìû ${companyInfo.phone}</p>
        </div>
      </div>
    </div>
  `;
};

const createOrder = async (req, res) => {
  const { firstName, lastName, email, phone, tariffType } = req.body;

  // Input validation
  if (!firstName || !lastName || !email || !phone) {
    return res.status(400).json({ error: '–í—Å—ñ –ø–æ–ª—è —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º–∏' });
  }

  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
    return res.status(400).json({ error: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email' });
  }

  if (firstName.length < 2 || lastName.length < 2) {
    return res.status(400).json({ error: '–Ü–º\'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –º–∞—é—Ç—å –±—É—Ç–∏ –¥–æ–≤—à–µ 2 —Å–∏–º–≤–æ–ª—ñ–≤' });
  }

  if (phone.length < 10) {
    return res.status(400).json({ error: '–¢–µ–ª–µ—Ñ–æ–Ω –º–∞—î –±—É—Ç–∏ –¥–æ–≤—à–µ 10 —Å–∏–º–≤–æ–ª—ñ–≤' });
  }

  try {
    const existing = await User.findOne({ email });
    if (existing) return res.status(400).json({ error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î' });

    const rawPassword = generatePassword(8);
    const hashedPassword = await bcrypt.hash(rawPassword, 10);

    const newUser = await User.create({ firstName, lastName, email, phone, password: hashedPassword });
    const newOrder = await Order.create({ user: newUser._id, tariffType });
    
    console.log('New user created:', newUser.email, 'with password:', rawPassword);
    console.log('New order created:', newOrder._id);

    try {
      // Send email to customer
      await sendEmail(email, '–í–∞—à—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É', `
        <h2>–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</h2>
        <p><strong>–í–∞—à –ª–æ–≥—ñ–Ω:</strong> ${email}</p>
        <p><strong>–í–∞—à –ø–∞—Ä–æ–ª—å:</strong> ${rawPassword}</p>
        <p>–£–≤—ñ–π–¥—ñ—Ç—å —É —Å–≤—ñ–π –∫–∞–±—ñ–Ω–µ—Ç, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É.</p>
      `);
      console.log('Customer email sent successfully for:', email);
    } catch (emailError) {
      console.error('Customer email sending failed:', emailError);
    }

    try {
      // Send notification to admin
      await sendEmail(process.env.SMTP_EMAIL, '–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç—ñ', `
        <h2>–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</h2>
        <p><strong>–ö–ª—ñ—î–Ω—Ç:</strong> ${firstName} ${lastName}</p>
        <p><strong>Email:</strong> ${email}</p>
        <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${phone}</p>
        <p><strong>ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</strong> ${newOrder._id}</p>
        <p><strong>–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:</strong> ${new Date().toLocaleString('uk-UA')}</p>
        <hr>
        <p>–£–≤—ñ–π–¥—ñ—Ç—å –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.</p>
      `);
      console.log('Admin notification sent successfully');
    } catch (emailError) {
      console.error('Admin notification sending failed:', emailError);
    }

    res.status(201).json({ 
      message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ—à—Ç—É.',
      orderId: newOrder._id,
      userId: newUser._id
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.' });
  }
};

const updateTemplate = async (req, res) => {
  const { template, blocks } = req.body;
  const userId = req.user.userId;

  console.log('Update template request:', { userId, template, blocks: Object.keys(blocks || {}) });

  try {
    let order = await Order.findOne({ user: userId });
    const user = await User.findById(userId);
    
    if (!order) {
      // Create new order if doesn't exist
      order = await Order.create({ 
        user: userId,
        selectedTemplate: template,
        blocks: blocks,
        status: 'pending_payment'
      });
      console.log('Created new order:', order._id);
    } else {
      // Update existing order
      order.selectedTemplate = template;
      order.blocks = blocks;
      order.status = 'pending_payment';
      await order.save();
      console.log('Updated existing order:', order._id);
    }

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email –∑ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞–º–∏ –æ–ø–ª–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É
    try {
      const paymentEmailContent = generatePaymentEmailTemplate(order, user);
      await sendEmail(user.email, '–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', paymentEmailContent);
      console.log('Payment details email sent to client:', user.email);
    } catch (emailError) {
      console.error('Payment email sending failed:', emailError);
    }

    // Send notification to admin about template update
    try {
      await sendEmail(process.env.SMTP_EMAIL, '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≥–æ—Ç–æ–≤–µ –¥–æ –æ–ø–ª–∞—Ç–∏', `
        <h2>–ö–ª—ñ—î–Ω—Ç –∑–∞–ø–æ–≤–Ω–∏–≤ –≤—Å—ñ –¥–∞–Ω—ñ!</h2>
        <p><strong>–ö–ª—ñ—î–Ω—Ç:</strong> ${user.firstName} ${user.lastName}</p>
        <p><strong>Email:</strong> ${user.email}</p>
        <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${user.phone}</p>
        <p><strong>ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</strong> ${order._id}</p>
        <p><strong>–û–±—Ä–∞–Ω–∏–π —à–∞–±–ª–æ–Ω:</strong> ${template}</p>
        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç–∏</p>
        <p><strong>–ß–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:</strong> ${new Date().toLocaleString('uk-UA')}</p>
        <hr>
        <p>–ö–ª—ñ—î–Ω—Ç—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏. –£–≤—ñ–π–¥—ñ—Ç—å –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π.</p>
      `);
      console.log('Admin notification sent about payment pending');
    } catch (emailError) {
      console.error('Admin notification sending failed:', emailError);
    }

    res.status(200).json({ 
      message: '–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ—à—Ç—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–≤—ñ–∑–∏—Ç—ñ–≤ –æ–ø–ª–∞—Ç–∏.', 
      order,
      status: 'pending_payment'
    });
  } catch (error) {
    console.error('Update template error:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É' });
  }
};

const getMyOrder = async (req, res) => {
  const userId = req.user.userId;

  try {
    const order = await Order.findOne({ user: userId }).populate('user', 'firstName lastName email phone');
    
    if (!order) {
      return res.status(404).json({ error: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    res.status(200).json(order);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' });
  }
};

const confirmOrder = async (req, res) => {
  const { orderId } = req.params;
  const { amount } = req.body; // –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω—É –∑ —Ç—ñ–ª–∞ –∑–∞–ø–∏—Ç—É
  
  console.log('confirmOrder –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è orderId:', orderId);
  console.log('Custom amount:', amount);
  console.log('User –≤—ñ–¥ auth middleware:', req.user || 'No user (test route)');

  try {
    const order = await Order.findById(orderId).populate('user');
    if (!order) return res.status(404).json({ error: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–∞—Å—Ç–æ–º–Ω—É —Ü—ñ–Ω—É —è–∫—â–æ –≤–æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞
    if (amount && amount > 0) {
      order.amount = amount;
    }

    const pdfPath = await generatePDF(order);
    const pdfUrl = `/pdfs/${path.basename(pdfPath)}`;

    order.confirmed = true;
    order.pdfUrl = pdfUrl;
    await order.save();

    await sendEmail(order.user.email, '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', `
      <p>–í–∞—à –¥–æ–≥–æ–≤—ñ—Ä —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ. –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–∂–Ω–∞ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:</p>
      <a href="http://growth-tech.com.ua/${pdfUrl}" target="_blank">–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF</a>
    `);

    res.status(200).json({ message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ' });
  } catch (error) {
    console.error('–î–µ—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ confirmOrder:', error);
    console.error('Stack trace:', error.stack);
    res.status(500).json({ 
      error: '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', 
      details: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
};

const getAllOrders = async (req, res) => {
  try {
    const orders = await Order.find().populate('user', 'firstName lastName email phone').sort({ createdAt: -1 });
    console.log(`Retrieved ${orders.length} orders for admin`);
    res.status(200).json(orders);
  } catch (error) {
    console.error('Get all orders error:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å' });
  }
};

const updateOrderStatus = async (req, res) => {
  const { orderId } = req.params;
  const { status } = req.body;
  
  console.log('updateOrderStatus –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è orderId:', orderId, '–Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å:', status);
  
  const validStatuses = ['draft', 'pending_payment', 'paid', 'in_progress', 'completed', 'cancelled', 'payment_failed'];
  
  if (!validStatuses.includes(status)) {
    return res.status(400).json({ error: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' });
  }

  try {
    const order = await Order.findById(orderId).populate('user');
    if (!order) return res.status(404).json({ error: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });

    const oldStatus = order.status;
    order.status = status;
    await order.save();

    console.log(`–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderId} –∑–º—ñ–Ω–µ–Ω–æ –∑ ${oldStatus} –Ω–∞ ${status}`);

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É
    const statusMessages = {
      'draft': '–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ —ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Å—Ç–∞—Ç—É—Å—ñ —á–µ—Ä–Ω–µ—Ç–∫–∏',
      'in_progress': '–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ –≤ —Ä–æ–±–æ—Ç—É! –ú–∏ –ø–æ—á–∞–ª–∏ —Ä–æ–∑—Ä–æ–±–∫—É –≤–∞—à–æ–≥–æ —Å–∞–π—Ç—É',
      'completed': '–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–∞—à —Å–∞–π—Ç –≥–æ—Ç–æ–≤–∏–π',
      'cancelled': '–ù–∞ –∂–∞–ª—å, –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ',
      'pending_payment': '–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É—î –æ–ø–ª–∞—Ç–∏',
      'paid': '–î—è–∫—É—î–º–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º',
      'payment_failed': '–ü–æ–º–∏–ª–∫–∞ –æ–ø–ª–∞—Ç–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑'
    };

    try {
      await sendEmail(order.user.email, '–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', `
        <h2>–°—Ç–∞—Ç—É—Å –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–æ</h2>
        <p><strong>ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</strong> ${order._id}</p>
        <p><strong>–ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å:</strong> ${status}</p>
        <p>${statusMessages[status]}</p>
        <hr>
        <p>–£–≤—ñ–π–¥—ñ—Ç—å —É —Å–≤—ñ–π –∫–∞–±—ñ–Ω–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π.</p>
      `);
      console.log('Status update notification sent to client');
    } catch (emailError) {
      console.error('Status update notification failed:', emailError);
    }

    res.status(200).json({ 
      message: '–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ',
      order: {
        ...order.toObject(),
        oldStatus,
        newStatus: status
      }
    });
  } catch (error) {
    console.error('Update order status error:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' });
  }
};

module.exports = { createOrder, updateTemplate, getMyOrder, confirmOrder, getAllOrders, updateOrderStatus };