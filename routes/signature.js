// üìÅ routes/signature.js
const express = require('express');
const Order = require('../models/Order');
const { auth } = require('../middleware/auth');
const { generatePDF } = require('../utils/generatePDF');
const path = require('path');

const router = express.Router();

// –ü—ñ–¥–ø–∏—Å–∞—Ç–∏ –¥–æ–≥–æ–≤—ñ—Ä –∫–ª—ñ—î–Ω—Ç–æ–º
router.post('/sign/:orderId', auth, async (req, res) => {
  try {
    const { orderId } = req.params;
    const userId = req.user.userId;
    const clientIp = req.ip || req.connection.remoteAddress;

    const order = await Order.findById(orderId).populate('user');
    
    if (!order) {
      return res.status(404).json({ error: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    if (order.user._id.toString() !== userId) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ' });
    }

    if (order.clientSignature) {
      return res.status(400).json({ error: '–î–æ–≥–æ–≤—ñ—Ä —É–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–æ–º' });
    }

    // –î–æ–¥–∞—î–º–æ –ø—ñ–¥–ø–∏—Å –∫–ª—ñ—î–Ω—Ç–∞
    order.clientSignature = {
      name: `${order.user.firstName} ${order.user.lastName}`,
      date: new Date(),
      ip: clientIp
    };

    await order.save();

    // –†–µ–≥–µ–Ω–µ—Ä—É—î–º–æ PDF –∑ –ø—ñ–¥–ø–∏—Å–∞–º–∏
    if (order.executorSignature) {
      const pdfPath = await generatePDF(order);
      const pdfUrl = `/pdfs/${path.basename(pdfPath)}`;
      order.pdfUrl = pdfUrl;
      await order.save();
    }

    res.status(200).json({ 
      message: '–î–æ–≥–æ–≤—ñ—Ä –ø—ñ–¥–ø–∏—Å–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–æ–º',
      signed: true,
      signatureDate: order.clientSignature.date
    });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–ø–∏—Å–∞–Ω–Ω—è –¥–æ–≥–æ–≤–æ—Ä—É –∫–ª—ñ—î–Ω—Ç–æ–º:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–ø–∏—Å–∞–Ω–Ω—è –¥–æ–≥–æ–≤–æ—Ä—É' });
  }
});

// –ü—ñ–¥–ø–∏—Å–∞—Ç–∏ –¥–æ–≥–æ–≤—ñ—Ä –≤–∏–∫–æ–Ω–∞–≤—Ü–µ–º (–∞–¥–º—ñ–Ω)
router.post('/sign-executor/:orderId', async (req, res) => {
  try {
    const { orderId } = req.params;
    const { adminKey } = req.body;
    const executorIp = req.ip || req.connection.remoteAddress;

    // –ü—Ä–æ—Å—Ç–∏–π –∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    if (adminKey !== process.env.ADMIN_SIGNATURE_KEY) {
      return res.status(403).json({ error: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–ª—é—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
    }

    const order = await Order.findById(orderId).populate('user');
    
    if (!order) {
      return res.status(404).json({ error: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    if (order.executorSignature) {
      return res.status(400).json({ error: '–î–æ–≥–æ–≤—ñ—Ä —É–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–æ –≤–∏–∫–æ–Ω–∞–≤—Ü–µ–º' });
    }

    // –î–æ–¥–∞—î–º–æ –ø—ñ–¥–ø–∏—Å –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    order.executorSignature = {
      name: '–§–û–ü –ó–≤—ñ—Ä–∏—á –û–ª–µ–∫—Å–∞–Ω–¥—Ä –û–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á',
      date: new Date(),
      ip: executorIp
    };

    await order.save();

    // –†–µ–≥–µ–Ω–µ—Ä—É—î–º–æ PDF –∑ –ø—ñ–¥–ø–∏—Å–∞–º–∏
    if (order.clientSignature) {
      const pdfPath = await generatePDF(order);
      const pdfUrl = `/pdfs/${path.basename(pdfPath)}`;
      order.pdfUrl = pdfUrl;
      await order.save();
    }

    res.status(200).json({ 
      message: '–î–æ–≥–æ–≤—ñ—Ä –ø—ñ–¥–ø–∏—Å–∞–Ω–æ –≤–∏–∫–æ–Ω–∞–≤—Ü–µ–º',
      signed: true,
      signatureDate: order.executorSignature.date
    });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–ø–∏—Å–∞–Ω–Ω—è –¥–æ–≥–æ–≤–æ—Ä—É –≤–∏–∫–æ–Ω–∞–≤—Ü–µ–º:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–ø–∏—Å–∞–Ω–Ω—è –¥–æ–≥–æ–≤–æ—Ä—É' });
  }
});

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–ø–∏—Å—ñ–≤
router.get('/status/:orderId', auth, async (req, res) => {
  try {
    const { orderId } = req.params;
    const userId = req.user.userId;

    const order = await Order.findById(orderId).populate('user');
    
    if (!order) {
      return res.status(404).json({ error: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    if (order.user._id.toString() !== userId) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ' });
    }

    res.status(200).json({
      clientSigned: !!order.clientSignature,
      executorSigned: !!order.executorSignature,
      clientSignature: order.clientSignature,
      executorSignature: order.executorSignature,
      fullyExecuted: !!(order.clientSignature && order.executorSignature)
    });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø—ñ–¥–ø–∏—Å—ñ–≤:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É' });
  }
});

// –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –≤–µ—Ä—Å—ñ—é –¥–æ–≥–æ–≤–æ—Ä—É
router.post('/new-version/:orderId', async (req, res) => {
  try {
    const { orderId } = req.params;
    const { adminKey } = req.body;

    if (adminKey !== process.env.ADMIN_SIGNATURE_KEY) {
      return res.status(403).json({ error: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–ª—é—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
    }

    const order = await Order.findById(orderId).populate('user');
    
    if (!order) {
      return res.status(404).json({ error: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    // –ó–±—ñ–ª—å—à—É—î–º–æ –≤–µ—Ä—Å—ñ—é –¥–æ–≥–æ–≤–æ—Ä—É —Ç–∞ —Å–∫–∏–¥–∞—î–º–æ –ø—ñ–¥–ø–∏—Å–∏
    order.contractVersion = (order.contractVersion || 1) + 1;
    order.executorSignature = undefined;
    order.clientSignature = undefined;

    await order.save();

    // –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–∏–π PDF
    const pdfPath = await generatePDF(order);
    const pdfUrl = `/pdfs/${path.basename(pdfPath)}`;
    order.pdfUrl = pdfUrl;
    await order.save();

    res.status(200).json({ 
      message: '–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤—É –≤–µ—Ä—Å—ñ—é –¥–æ–≥–æ–≤–æ—Ä—É',
      version: order.contractVersion,
      pdfUrl: pdfUrl
    });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –≤–µ—Ä—Å—ñ—ó:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –≤–µ—Ä—Å—ñ—ó' });
  }
});

module.exports = router;