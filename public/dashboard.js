// Dashboard functionality with new template specifications
let selectedTemplate = null;
let currentOrder = null;

// API Configuration
const API_CONFIG = {
  baseURL: window.location.hostname === 'localhost' 
    ? 'http://localhost:4444' 
    : 'https://growth-tech.com.ua',
  
  endpoints: {
    auth: '/api/auth',
    orders: '/api/orders',
    contact: '/api/contact',
    payment: '/api/payment',
    upload: '/api/upload',
    templates: '/api/templates',
    profile: '/api/profile',
    website: '/api/website',
    admin: '/api/admin'
  }
};

// Helper function to get full API URL
function getAPIUrl(endpoint) {
  const fullUrl = `${API_CONFIG.baseURL}${endpoint}`;
  console.log('API Request URL:', fullUrl);
  return fullUrl;
}

// Template configurations based on new specifications
const templateConfigs = {
  single: {
    name: '–û–¥–Ω–æ—Å—Ç–æ—Ä—ñ–Ω–∫–æ–≤–∏–π —Å–∞–π—Ç',
    price: 350,
    description: '–ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó –æ–¥–Ω—ñ—î—ó –ø–æ—Å–ª—É–≥–∏ –∞–±–æ –ø—Ä–æ–¥—É–∫—Ç—É',
    sections: ['hero', 'about', 'benefits', 'services', 'testimonials', 'portfolio', 'faq', 'contact']
  },
  landing: {
    name: '–õ–µ–Ω–¥—ñ–Ω–≥ (2-4 —Å—Ç–æ—Ä—ñ–Ω–∫–∏)',
    price: 450,
    description: '–î–ª—è —Å–∫–ª–∞–¥–Ω—ñ—à–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É',
    pages: ['home', 'services', 'about', 'contacts', 'reviews']
  },
  blog: {
    name: '–ë–ª–æ–≥ / –°—Ç–∞—Ç–µ–π–Ω–∏–π —Å–∞–π—Ç',
    price: 950,
    description: '–ì–æ–ª–æ–≤–Ω–∞ –∑ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è–º–∏, —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Å—Ç–∞—Ç–µ–π, –ø–æ—à—É–∫, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ',
    features: ['home', 'articles', 'author', 'contacts', 'search', 'comments']
  }
};

// Check if user is logged in
document.addEventListener('DOMContentLoaded', function() {
  const user = JSON.parse(localStorage.getItem('user'));
  const token = localStorage.getItem('token');
  
  if (!user || !token) {
    alert('–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É');
    window.location.href = '/';
    return;
  }
  
  // Update user display
  document.getElementById('userNameDisplay').textContent = `${user.firstName} ${user.lastName}`;
  
  // Update mobile user display
  const mobileUserDisplay = document.getElementById('userNameDisplayMob');
  if (mobileUserDisplay) {
    mobileUserDisplay.textContent = `${user.firstName} ${user.lastName}`;
  }
  
  // Initialize theme
  const saved = localStorage.getItem("theme") || "light";
  setTheme(saved);
  
  // Load existing order if any
  loadUserOrder();
  
  // Set up password change button listeners
  const passwordBtn = document.getElementById('passwordChangeBtn');
  if (passwordBtn) {
    console.log('Password button found, adding event listener');
    passwordBtn.addEventListener('click', function(e) {
      e.preventDefault();
      console.log('Password button clicked');
      openPasswordModal();
    });
  } else {
    console.error('Password button not found');
  }
  
  const passwordBtnMob = document.getElementById('passwordChangeBtnMob');
  if (passwordBtnMob) {
    console.log('Mobile password button found, adding event listener');
    passwordBtnMob.addEventListener('click', function(e) {
      e.preventDefault();
      console.log('Mobile password button clicked');
      openPasswordModal();
    });
  } else {
    console.error('Mobile password button not found');
  }
  
  // Set up logout button listeners
  const logoutBtn = document.getElementById('logoutBtn');
  if (logoutBtn) {
    logoutBtn.addEventListener('click', function(e) {
      e.preventDefault();
      logout();
    });
  }
  
  const logoutBtnMob = document.getElementById('logoutBtnMob');
  if (logoutBtnMob) {
    logoutBtnMob.addEventListener('click', function(e) {
      e.preventDefault();
      logout();
    });
  }
  
  // Set up template selection will be called after loading order
  
  // Set up password form
  const passwordForm = document.getElementById('passwordForm');
  if (passwordForm) {
    passwordForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(e.target);
      const currentPassword = formData.get('currentPassword');
      const newPassword = formData.get('newPassword');
      const confirmPassword = formData.get('confirmPassword');
      
      // Validate passwords match
      if (newPassword !== confirmPassword) {
        showAlert('–ù–æ–≤—ñ –ø–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å', 'error');
        return;
      }
      
      try {
        const token = localStorage.getItem('token');
        const response = await fetch(getAPIUrl('/api/auth/change-password'), {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({
            currentPassword,
            newPassword
          })
        });
        
        const result = await response.json();
        
        if (response.ok) {
          showAlert('–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!', 'success');
          closePasswordModal();
        } else {
          showAlert(result.error || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–∞—Ä–æ–ª—è', 'error');
        }
      } catch (error) {
        console.error('Password change error:', error);
        showAlert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–∞—Ä–æ–ª—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', 'error');
      }
    });
  }
});

// Filter templates based on user's tariff type
function filterTemplatesByTariff(tariffType) {
  const templateCards = document.querySelectorAll('.template-card');
  
  templateCards.forEach(card => {
    const templateType = card.dataset.template;
    
    if (tariffType && templateType !== tariffType) {
      // Hide templates that don't match user's tariff
      card.style.display = 'none';
    } else {
      // Show only the user's tariff template
      card.style.display = 'block';
      
      // If this is the user's tariff, auto-select it
      if (templateType === tariffType) {
        card.classList.add('selected');
        selectedTemplate = templateType;
        
        // Generate configuration form
        generateConfigForm(selectedTemplate);
        
        // Update order summary
        updateOrderSummary();
        
        // Show sections config
        document.getElementById('sectionsConfig').style.display = 'block';
      }
    }
  });
  
  // Update header text to indicate single tariff
  if (tariffType) {
    const templateSection = document.querySelector('.template-selection h2');
    if (templateSection) {
      const config = templateConfigs[tariffType];
      if (config) {
        templateSection.textContent = `–í–∞—à —Ç–∞—Ä–∏—Ñ: ${config.name}`;
      }
    }
  }
}

// Setup template selection
function setupTemplateSelection() {
  document.querySelectorAll('.template-card').forEach(card => {
    card.addEventListener('click', function() {
      // Remove previous selection
      document.querySelectorAll('.template-card').forEach(c => c.classList.remove('selected'));
      
      // Select current template
      this.classList.add('selected');
      selectedTemplate = this.dataset.template;
      
      // Generate configuration form
      generateConfigForm(selectedTemplate);
      
      // Update order summary
      updateOrderSummary();
      
      // Show sections config
      document.getElementById('sectionsConfig').style.display = 'block';
      
      // Scroll to sections
      document.getElementById('sectionsConfig').scrollIntoView({ behavior: 'smooth' });
    });
  });
}

// Generate configuration form based on template
function generateConfigForm(template) {
  const config = templateConfigs[template];
  const container = document.getElementById('dynamicSections');
  const title = document.getElementById('configTitle');
  
  title.textContent = `–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: ${config.name}`;
  
  let html = '';
  
  switch (template) {
    case 'single':
      html = generateOnePageForm();
      break;
    case 'landing':
      html = generateLandingForm();
      break;
    case 'blog':
      html = generateBlogForm();
      break;
  }
  
  container.innerHTML = html;
  
  // Add event listeners after HTML is inserted
  setupFormListeners(template);
}

// Generate one-page site form
function generateOnePageForm() {
  return `
    <div class="section-block">
      <h3>üéØ Hero —Å–µ–∫—Ü—ñ—è</h3>
      <p class="section-description">–ü—Ä–∏–≤–∞–±–ª–∏–≤–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –ø—ñ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫, CTA –∫–Ω–æ–ø–∫–∞</p>
      
      <div class="form-group">
        <label for="heroTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫ *</label>
        <input type="text" id="heroTitle" placeholder="–ù–∞–∑–≤–∞ –≤–∞—à–æ—ó –ø–æ—Å–ª—É–≥–∏ –∞–±–æ –ø—Ä–æ–¥—É–∫—Ç—É">
      </div>
      
      <div class="form-group">
        <label for="heroSubtitle">–ü—ñ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ *</label>
        <input type="text" id="heroSubtitle" placeholder="–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å —Ç–æ–≥–æ, —â–æ –≤–∏ –ø—Ä–æ–ø–æ–Ω—É—î—Ç–µ">
      </div>
      
      <div class="form-group">
        <label for="heroButton">–¢–µ–∫—Å—Ç CTA –∫–Ω–æ–ø–∫–∏ *</label>
        <input type="text" id="heroButton" placeholder="–ó–∞–º–æ–≤–∏—Ç–∏, –ó–≤'—è–∑–∞—Ç–∏—Å—è, –î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ">
      </div>
    </div>

    <div class="section-block">
      <h3>üìù –ü—Ä–æ –Ω–∞—Å / –ü—Ä–æ –ø—Ä–æ–¥—É–∫—Ç</h3>
      <p class="section-description">–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å —Ç–æ–≥–æ, —â–æ –≤–∏ –ø—Ä–æ–ø–æ–Ω—É—î—Ç–µ</p>
      
      <div class="form-group">
        <label for="aboutTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó *</label>
        <input type="text" id="aboutTitle" placeholder="–ü—Ä–æ –Ω–∞—Å, –ü—Ä–æ –ø—Ä–æ–¥—É–∫—Ç, –•—Ç–æ –º–∏">
      </div>
      
      <div class="form-group">
        <label for="aboutText">–û–ø–∏—Å *</label>
        <textarea id="aboutText" rows="4" placeholder="–†–æ–∑–∫–∞–∂—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –≤–∞—à—É –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å, –ø—Ä–æ–¥—É–∫—Ç –∞–±–æ –ø–æ—Å–ª—É–≥—É"></textarea>
      </div>
    </div>

    <div class="section-block">
      <h3>‚≠ê –ü–µ—Ä–µ–≤–∞–≥–∏ / –ß–æ–º—É –º–∏</h3>
      <p class="section-description">3-6 –±–ª–æ–∫—ñ–≤ –∑ —ñ–∫–æ–Ω–∫–∞–º–∏ –∞–±–æ —Ü–∏—Ñ—Ä–∞–º–∏</p>
      
      <div class="form-group">
        <label for="benefitsTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó *</label>
        <input type="text" id="benefitsTitle" placeholder="–ù–∞—à—ñ –ø–µ—Ä–µ–≤–∞–≥–∏, –ß–æ–º—É –æ–±–∏—Ä–∞—é—Ç—å –Ω–∞—Å">
      </div>
      
      <div class="benefits-list" id="benefitsList">
        <div class="benefit-item">
          <input type="text" placeholder="–ü–µ—Ä–µ–≤–∞–≥–∞ 1" class="benefit-title">
          <textarea placeholder="–û–ø–∏—Å –ø–µ—Ä–µ–≤–∞–≥–∏ 1" rows="2" class="benefit-desc"></textarea>
        </div>
        <div class="benefit-item">
          <input type="text" placeholder="–ü–µ—Ä–µ–≤–∞–≥–∞ 2" class="benefit-title">
          <textarea placeholder="–û–ø–∏—Å –ø–µ—Ä–µ–≤–∞–≥–∏ 2" rows="2" class="benefit-desc"></textarea>
        </div>
        <div class="benefit-item">
          <input type="text" placeholder="–ü–µ—Ä–µ–≤–∞–≥–∞ 3" class="benefit-title">
          <textarea placeholder="–û–ø–∏—Å –ø–µ—Ä–µ–≤–∞–≥–∏ 3" rows="2" class="benefit-desc"></textarea>
        </div>
      </div>
      <button type="button" class="add-benefit-btn" onclick="addBenefit()">+ –î–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–≤–∞–≥—É</button>
    </div>

    <div class="section-block">
      <h3>üõçÔ∏è –ü–æ—Å–ª—É–≥–∏ / –ü—Ä–æ–¥—É–∫—Ç–∏</h3>
      <p class="section-description">–°–ø–∏—Å–æ–∫ –∑ —Ü—ñ–Ω–∞–º–∏ –∞–±–æ –∫–æ—Ä–æ—Ç–∫–∏–º –æ–ø–∏—Å–æ–º</p>
      
      <div class="form-group">
        <label for="servicesTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó *</label>
        <input type="text" id="servicesTitle" placeholder="–ù–∞—à—ñ –ø–æ—Å–ª—É–≥–∏, –©–æ –º–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ">
      </div>
      
      <div class="services-list" id="servicesList">
        <div class="service-item">
          <input type="text" placeholder="–ù–∞–∑–≤–∞ –ø–æ—Å–ª—É–≥–∏ 1" class="service-name">
          <textarea placeholder="–û–ø–∏—Å —Ç–∞ —Ü—ñ–Ω–∞" rows="2" class="service-desc"></textarea>
        </div>
        <div class="service-item">
          <input type="text" placeholder="–ù–∞–∑–≤–∞ –ø–æ—Å–ª—É–≥–∏ 2" class="service-name">
          <textarea placeholder="–û–ø–∏—Å —Ç–∞ —Ü—ñ–Ω–∞" rows="2" class="service-desc"></textarea>
        </div>
      </div>
      <button type="button" class="add-service-btn" onclick="addService()">+ –î–æ–¥–∞—Ç–∏ –ø–æ—Å–ª—É–≥—É</button>
    </div>

    <div class="section-block">
      <h3>üí¨ –í—ñ–¥–≥—É–∫–∏</h3>
      <p class="section-description">1-3 –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –∫–ª—ñ—î–Ω—Ç—ñ–≤</p>
      
      <div class="form-group">
        <label for="testimonialsTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó</label>
        <input type="text" id="testimonialsTitle" placeholder="–í—ñ–¥–≥—É–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤, –©–æ –∫–∞–∂—É—Ç—å –ø—Ä–æ –Ω–∞—Å">
      </div>
      
      <div class="testimonials-list" id="testimonialsList">
        <div class="testimonial-item">
          <input type="text" placeholder="–Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞" class="testimonial-name">
          <input type="text" placeholder="–ö–æ–º–ø–∞–Ω—ñ—è / –ü–æ—Å–∞–¥–∞" class="testimonial-company">
          <textarea placeholder="–¢–µ–∫—Å—Ç –≤—ñ–¥–≥—É–∫—É" rows="3" class="testimonial-text"></textarea>
        </div>
      </div>
      <button type="button" class="add-testimonial-btn" onclick="addTestimonial()">+ –î–æ–¥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫</button>
    </div>

    <div class="section-block">
      <h3>üé® –ü–æ—Ä—Ç—Ñ–æ–ª—ñ–æ / –ü—Ä–∏–∫–ª–∞–¥–∏ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)</h3>
      <p class="section-description">2-4 –∫–µ–π—Å–∏ –≤–∞—à–∏—Ö —Ä–æ–±—ñ—Ç</p>
      
      <div class="form-group">
        <label for="includePortfolio">–í–∫–ª—é—á–∏—Ç–∏ —Å–µ–∫—Ü—ñ—é –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ?</label>
        <input type="checkbox" id="includePortfolio" onchange="togglePortfolioSection()">
      </div>
      
      <div id="portfolioSection" style="display: none;">
        <div class="form-group">
          <label for="portfolioTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó</label>
          <input type="text" id="portfolioTitle" placeholder="–ù–∞—à—ñ —Ä–æ–±–æ—Ç–∏, –ü–æ—Ä—Ç—Ñ–æ–ª—ñ–æ, –ü—Ä–∏–∫–ª–∞–¥–∏">
        </div>
        
        <div class="portfolio-list" id="portfolioList">
          <div class="portfolio-item">
            <input type="text" placeholder="–ù–∞–∑–≤–∞ –ø—Ä–æ—î–∫—Ç—É" class="portfolio-name">
            <textarea placeholder="–û–ø–∏—Å –ø—Ä–æ—î–∫—Ç—É" rows="2" class="portfolio-desc"></textarea>
          </div>
        </div>
        <button type="button" class="add-portfolio-btn" onclick="addPortfolioItem()">+ –î–æ–¥–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç</button>
      </div>
    </div>

    <div class="section-block">
      <h3>‚ùì FAQ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)</h3>
      <p class="section-description">–ß–∞—Å—Ç—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è</p>
      
      <div class="form-group">
        <label for="includeFAQ">–í–∫–ª—é—á–∏—Ç–∏ —Å–µ–∫—Ü—ñ—é FAQ?</label>
        <input type="checkbox" id="includeFAQ" onchange="toggleFAQSection()">
      </div>
      
      <div id="faqSection" style="display: none;">
        <div class="form-group">
          <label for="faqTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó</label>
          <input type="text" id="faqTitle" placeholder="–ß–∞—Å—Ç—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, FAQ">
        </div>
        
        <div class="faq-list" id="faqList">
          <div class="faq-item">
            <input type="text" placeholder="–ó–∞–ø–∏—Ç–∞–Ω–Ω—è" class="faq-question">
            <textarea placeholder="–í—ñ–¥–ø–æ–≤—ñ–¥—å" rows="2" class="faq-answer"></textarea>
          </div>
        </div>
        <button type="button" class="add-faq-btn" onclick="addFAQItem()">+ –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è</button>
      </div>
    </div>

    <div class="section-block">
      <h3>üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —Ñ–æ—Ä–º–∞ / CTA</h3>
      <p class="section-description">–Ü–º'—è, email, –∫–Ω–æ–ø–∫–∞</p>
      
      <div class="form-group">
        <label for="contactTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó *</label>
        <input type="text" id="contactTitle" placeholder="–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏, –ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é">
      </div>
      
      <div class="form-group">
        <label for="contactText">–¢–µ–∫—Å—Ç –Ω–∞–¥ —Ñ–æ—Ä–º–æ—é</label>
        <textarea id="contactText" rows="2" placeholder="–ó–∞–ª–∏—à—Ç–µ –∑–∞—è–≤–∫—É —ñ –º–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏"></textarea>
      </div>
      
      <div class="form-group">
        <label for="contactButton">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Ñ–æ—Ä–º–∏ *</label>
        <input type="text" id="contactButton" placeholder="–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏, –ó–∞–º–æ–≤–∏—Ç–∏, –ó–≤'—è–∑–∞—Ç–∏—Å—è">
      </div>
    </div>

    <div class="section-block">
      <h3>üîó –§—É—Ç–µ—Ä</h3>
      <p class="section-description">–°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ, –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ, –∫–æ–ø—ñ—Ä–∞–π—Ç</p>
      
      <div class="form-group">
        <label for="footerPhone">–¢–µ–ª–µ—Ñ–æ–Ω *</label>
        <input type="tel" id="footerPhone" placeholder="+380 XX XXX XX XX">
      </div>
      
      <div class="form-group">
        <label for="footerEmail">Email *</label>
        <input type="email" id="footerEmail" placeholder="info@company.com">
      </div>
      
      <div class="form-group">
        <label for="footerAddress">–ê–¥—Ä–µ—Å–∞</label>
        <input type="text" id="footerAddress" placeholder="–º. –ö–∏—ó–≤, –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1">
      </div>
      
      <div class="form-group">
        <label for="socialLinks">–°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Ä—è–¥–æ–∫)</label>
        <textarea id="socialLinks" rows="3" placeholder="Facebook: https://facebook.com/yourpage&#10;Instagram: https://instagram.com/yourpage&#10;Telegram: https://t.me/yourpage"></textarea>
      </div>
      
      <div class="form-group">
        <label for="copyrightText">–¢–µ–∫—Å—Ç –∫–æ–ø—ñ—Ä–∞–π—Ç—É *</label>
        <input type="text" id="copyrightText" placeholder="¬© 2025 –ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó. –í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω—ñ">
      </div>
    </div>
  `;
}

// Generate landing pages form
function generateLandingForm() {
  return `
    <div class="section-block">
      <h3>üè† –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞</h3>
      <p class="section-description">Hero-–±–ª–æ–∫, –∫–æ—Ä–æ—Ç–∫–æ –ø—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é, –ø–µ—Ä–µ–≤–∞–≥–∏, CTA</p>
      
      <div class="form-group">
        <label for="homeHeroTitle">Hero –∑–∞–≥–æ–ª–æ–≤–æ–∫ *</label>
        <input type="text" id="homeHeroTitle" placeholder="–ì–æ–ª–æ–≤–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–∞–π—Ç—É">
      </div>
      
      <div class="form-group">
        <label for="homeHeroSubtitle">Hero –ø—ñ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ *</label>
        <input type="text" id="homeHeroSubtitle" placeholder="–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ">
      </div>
      
      <div class="form-group">
        <label for="homeCompanyBrief">–ö–æ—Ä–æ—Ç–∫–æ –ø—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é *</label>
        <textarea id="homeCompanyBrief" rows="3" placeholder="1-2 —Ä–µ—á–µ–Ω–Ω—è –ø—Ä–æ –≤–∞—à—É –∫–æ–º–ø–∞–Ω—ñ—é"></textarea>
      </div>
      
      <div class="form-group">
        <label for="homeAdvantages">–ü–µ—Ä–µ–≤–∞–≥–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É) *</label>
        <textarea id="homeAdvantages" rows="2" placeholder="–Ø–∫—ñ—Å—Ç—å, –®–≤–∏–¥–∫—ñ—Å—Ç—å, –î–æ—Å–≤—ñ–¥, –ì–∞—Ä–∞–Ω—Ç—ñ—è"></textarea>
      </div>
      
      <div class="form-group">
        <label for="homeCTAButton">–¢–µ–∫—Å—Ç CTA –∫–Ω–æ–ø–∫–∏ *</label>
        <input type="text" id="homeCTAButton" placeholder="–ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É, –î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ">
      </div>
    </div>

    <div class="section-block">
      <h3>üõçÔ∏è –°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–æ—Å–ª—É–≥/–ø—Ä–æ–¥—É–∫—Ç—ñ–≤</h3>
      <p class="section-description">–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–∂–Ω—É –ø–æ—Å–ª—É–≥—É, –ø–∞–∫–µ—Ç–∏ –∞–±–æ —Ü—ñ–Ω–∏, –∫–Ω–æ–ø–∫–∞ "–ó–∞–º–æ–≤–∏—Ç–∏"</p>
      
      <div class="form-group">
        <label for="servicesPageTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ *</label>
        <input type="text" id="servicesPageTitle" placeholder="–ù–∞—à—ñ –ø–æ—Å–ª—É–≥–∏, –©–æ –º–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ">
      </div>
      
      <div class="form-group">
        <label for="servicesPageIntro">–í—Å—Ç—É–ø–Ω–∏–π —Ç–µ–∫—Å—Ç</label>
        <textarea id="servicesPageIntro" rows="2" placeholder="–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –≤–∞—à–∏—Ö –ø–æ—Å–ª—É–≥"></textarea>
      </div>
      
      <div class="services-detailed-list" id="servicesDetailedList">
        <div class="service-detailed-item">
          <input type="text" placeholder="–ù–∞–∑–≤–∞ –ø–æ—Å–ª—É–≥–∏" class="service-detailed-name">
          <textarea placeholder="–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø–æ—Å–ª—É–≥–∏" rows="3" class="service-detailed-desc"></textarea>
          <input type="text" placeholder="–¶—ñ–Ω–∞ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)" class="service-detailed-price">
        </div>
        <div class="service-detailed-item">
          <input type="text" placeholder="–ù–∞–∑–≤–∞ –ø–æ—Å–ª—É–≥–∏" class="service-detailed-name">
          <textarea placeholder="–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø–æ—Å–ª—É–≥–∏" rows="3" class="service-detailed-desc"></textarea>
          <input type="text" placeholder="–¶—ñ–Ω–∞ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)" class="service-detailed-price">
        </div>
      </div>
      <button type="button" class="add-service-detailed-btn" onclick="addDetailedService()">+ –î–æ–¥–∞—Ç–∏ –ø–æ—Å–ª—É–≥—É</button>
      
      <div class="form-group">
        <label for="servicesOrderButton">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è *</label>
        <input type="text" id="servicesOrderButton" placeholder="–ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É">
      </div>
    </div>

    <div class="section-block">
      <h3>üë• –°—Ç–æ—Ä—ñ–Ω–∫–∞ "–ü—Ä–æ –Ω–∞—Å"</h3>
      <p class="section-description">–ö–æ–º–∞–Ω–¥–∞, —ñ—Å—Ç–æ—Ä—ñ—è, —Ü—ñ–Ω–Ω–æ—Å—Ç—ñ</p>
      
      <div class="form-group">
        <label for="aboutPageTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ *</label>
        <input type="text" id="aboutPageTitle" placeholder="–ü—Ä–æ –Ω–∞—Å, –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞">
      </div>
      
      <div class="form-group">
        <label for="companyHistory">–Ü—Å—Ç–æ—Ä—ñ—è –∫–æ–º–ø–∞–Ω—ñ—ó</label>
        <textarea id="companyHistory" rows="4" placeholder="–†–æ–∑–∫–∞–∂—ñ—Ç—å –ø—Ä–æ —ñ—Å—Ç–æ—Ä—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫ –∫–æ–º–ø–∞–Ω—ñ—ó"></textarea>
      </div>
      
      <div class="form-group">
        <label for="companyValues">–¶—ñ–Ω–Ω–æ—Å—Ç—ñ –∫–æ–º–ø–∞–Ω—ñ—ó</label>
        <textarea id="companyValues" rows="3" placeholder="–©–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–ª–∏–≤–æ —É —Ä–æ–±–æ—Ç—ñ"></textarea>
      </div>
      
      <div class="team-list" id="teamList">
        <div class="team-member">
          <input type="text" placeholder="–Ü–º'—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞" class="team-name">
          <input type="text" placeholder="–ü–æ—Å–∞–¥–∞" class="team-position">
          <textarea placeholder="–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å" rows="2" class="team-desc"></textarea>
        </div>
      </div>
      <button type="button" class="add-team-member-btn" onclick="addTeamMember()">+ –î–æ–¥–∞—Ç–∏ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞</button>
    </div>

    <div class="section-block">
      <h3>üìû –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤</h3>
      <p class="section-description">–ö–∞—Ä—Ç–∞, —Ñ–æ—Ä–º–∞ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É, —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ</p>
      
      <div class="form-group">
        <label for="contactsPageTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ *</label>
        <input type="text" id="contactsPageTitle" placeholder="–ö–æ–Ω—Ç–∞–∫—Ç–∏, –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏">
      </div>
      
      <div class="form-group">
        <label for="contactsPhone">–¢–µ–ª–µ—Ñ–æ–Ω *</label>
        <input type="tel" id="contactsPhone" placeholder="+380 XX XXX XX XX">
      </div>
      
      <div class="form-group">
        <label for="contactsEmail">Email *</label>
        <input type="email" id="contactsEmail" placeholder="info@company.com">
      </div>
      
      <div class="form-group">
        <label for="contactsAddress">–ê–¥—Ä–µ—Å–∞ –æ—Ñ—ñ—Å—É *</label>
        <input type="text" id="contactsAddress" placeholder="–º. –ö–∏—ó–≤, –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1">
      </div>
      
      <div class="form-group">
        <label for="contactsHours">–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏</label>
        <input type="text" id="contactsHours" placeholder="–ü–Ω-–ü—Ç: 9:00-18:00, –°–±-–ù–¥: –≤–∏—Ö—ñ–¥–Ω—ñ">
      </div>
      
      <div class="form-group">
        <label for="contactsSocial">–°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ</label>
        <textarea id="contactsSocial" rows="3" placeholder="Facebook: https://facebook.com/yourpage&#10;Instagram: https://instagram.com/yourpage"></textarea>
      </div>
    </div>

    <div class="section-block">
      <h3>‚≠ê –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –≤—ñ–¥–≥—É–∫—ñ–≤</h3>
      <p class="section-description">–î–æ–¥–∞—Ç–∫–æ–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ –≤—ñ–¥–≥—É–∫–∞–º–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤</p>
      
      <div class="form-group">
        <label for="includeReviewsPage">–í–∫–ª—é—á–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤—ñ–¥–≥—É–∫—ñ–≤?</label>
        <input type="checkbox" id="includeReviewsPage" onchange="toggleReviewsPage()">
      </div>
      
      <div id="reviewsPageSection" style="display: none;">
        <div class="form-group">
          <label for="reviewsPageTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ—Ä—ñ–Ω–∫–∏</label>
          <input type="text" id="reviewsPageTitle" placeholder="–í—ñ–¥–≥—É–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤">
        </div>
        
        <div class="reviews-list" id="reviewsList">
          <div class="review-item">
            <input type="text" placeholder="–Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞" class="review-name">
            <input type="text" placeholder="–ö–æ–º–ø–∞–Ω—ñ—è" class="review-company">
            <textarea placeholder="–í—ñ–¥–≥—É–∫" rows="3" class="review-text"></textarea>
          </div>
        </div>
        <button type="button" class="add-review-btn" onclick="addReview()">+ –î–æ–¥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫</button>
      </div>
    </div>
  `;
}

// Generate blog site form
function generateBlogForm() {
  return `
    <div class="section-block">
      <h3>üè† –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞</h3>
      <p class="section-description">Hero-–±–ª–æ–∫ –∑ –æ—Å—Ç–∞–Ω–Ω—ñ–º–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è–º–∏, –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, –ø–æ—à—É–∫, –ø–æ–ø—É–ª—è—Ä–Ω—ñ –ø–æ—Å—Ç–∏</p>
      
      <div class="form-group">
        <label for="blogTitle">–ù–∞–∑–≤–∞ –±–ª–æ–≥—É/—Å–∞–π—Ç—É *</label>
        <input type="text" id="blogTitle" placeholder="–ú—ñ–π –±–ª–æ–≥, –ù–æ–≤–∏–Ω–∏ –∫–æ–º–ø–∞–Ω—ñ—ó">
      </div>
      
      <div class="form-group">
        <label for="blogSubtitle">–ü—ñ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ *</label>
        <input type="text" id="blogSubtitle" placeholder="–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å —Ç–µ–º–∞—Ç–∏–∫–∏ –±–ª–æ–≥—É">
      </div>
      
      <div class="form-group">
        <label for="blogCategories">–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó (—á–µ—Ä–µ–∑ –∫–æ–º—É) *</label>
        <input type="text" id="blogCategories" placeholder="–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó, –ù–æ–≤–∏–Ω–∏, –ü–æ—Ä–∞–¥–∏, –û–≥–ª—è–¥–∏">
      </div>
      
      <div class="form-group">
        <label for="postsPerPage">–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–∞—Ç–µ–π –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ</label>
        <select id="postsPerPage">
          <option value="5">5 —Å—Ç–∞—Ç–µ–π</option>
          <option value="10" selected>10 —Å—Ç–∞—Ç–µ–π</option>
          <option value="15">15 —Å—Ç–∞—Ç–µ–π</option>
          <option value="20">20 —Å—Ç–∞—Ç–µ–π</option>
        </select>
      </div>
      
      <div class="blog-features">
        <h4>–§—É–Ω–∫—Ü—ñ—ó –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏:</h4>
        <div class="feature-list">
          <div class="feature-item">
            <input type="checkbox" id="showSearch" checked>
            <label for="showSearch">–ü–æ—à—É–∫ –ø–æ —Å—Ç–∞—Ç—Ç—è—Ö</label>
          </div>
          <div class="feature-item">
            <input type="checkbox" id="showCategories" checked>
            <label for="showCategories">–§—ñ–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö</label>
          </div>
          <div class="feature-item">
            <input type="checkbox" id="showPopular" checked>
            <label for="showPopular">–ü–æ–ø—É–ª—è—Ä–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ</label>
          </div>
          <div class="feature-item">
            <input type="checkbox" id="showRecent" checked>
            <label for="showRecent">–û—Å—Ç–∞–Ω–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ</label>
          </div>
        </div>
      </div>
    </div>

    <div class="section-block">
      <h3>üìÑ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó</h3>
      <p class="section-description">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—Ç—ñ, –∞–≤—Ç–æ—Ä, –¥–∞—Ç–∞, —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ, –∫–Ω–æ–ø–∫–∏ —Å–æ—Ü–º–µ—Ä–µ–∂, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ</p>
      
      <div class="form-group">
        <label for="articleAuthorName">–Ü–º'—è –∞–≤—Ç–æ—Ä–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º *</label>
        <input type="text" id="articleAuthorName" placeholder="–í–∞—à–µ —ñ–º'—è –∞–±–æ –ø—Å–µ–≤–¥–æ–Ω—ñ–º">
      </div>
      
      <div class="form-group">
        <label for="dateFormat">–§–æ—Ä–º–∞—Ç –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–∞—Ç–∏</label>
        <select id="dateFormat">
          <option value="dd.mm.yyyy">–î–î.–ú–ú.–†–†–†–† (31.12.2024)</option>
          <option value="dd/mm/yyyy">–î–î/–ú–ú/–†–†–†–† (31/12/2024)</option>
          <option value="dd month yyyy">–î–î –º—ñ—Å—è—Ü—å –†–†–†–† (31 –≥—Ä—É–¥–Ω—è 2024)</option>
        </select>
      </div>
      
      <div class="article-features">
        <h4>–§—É–Ω–∫—Ü—ñ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Å—Ç–∞—Ç—Ç—ñ:</h4>
        <div class="feature-list">
          <div class="feature-item">
            <input type="checkbox" id="enableComments" checked>
            <label for="enableComments">–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ</label>
          </div>
          <div class="feature-item">
            <input type="checkbox" id="enableSharing" checked>
            <label for="enableSharing">–ö–Ω–æ–ø–∫–∏ –ø–æ—à–∏—Ä–µ–Ω–Ω—è</label>
          </div>
          <div class="feature-item">
            <input type="checkbox" id="enableTags" checked>
            <label for="enableTags">–¢–µ–≥–∏ —Å—Ç–∞—Ç–µ–π</label>
          </div>
          <div class="feature-item">
            <input type="checkbox" id="enableRelated">
            <label for="enableRelated">–°—Ö–æ–∂—ñ —Å—Ç–∞—Ç—Ç—ñ</label>
          </div>
          <div class="feature-item">
            <input type="checkbox" id="enableReadTime">
            <label for="enableReadTime">–ß–∞—Å —á–∏—Ç–∞–Ω–Ω—è</label>
          </div>
        </div>
      </div>
      
      <div class="form-group">
        <label for="socialPlatforms">–ü–ª–∞—Ç—Ñ–æ—Ä–º–∏ –¥–ª—è –ø–æ—à–∏—Ä–µ–Ω–Ω—è (–æ–±—Ä–∞–Ω—ñ –±—É–¥—É—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ)</label>
        <div class="social-platforms">
          <div class="feature-item">
            <input type="checkbox" id="shareFacebook" checked>
            <label for="shareFacebook">Facebook</label>
          </div>
          <div class="feature-item">
            <input type="checkbox" id="shareTwitter" checked>
            <label for="shareTwitter">Twitter/X</label>
          </div>
          <div class="feature-item">
            <input type="checkbox" id="shareTelegram" checked>
            <label for="shareTelegram">Telegram</label>
          </div>
          <div class="feature-item">
            <input type="checkbox" id="shareLinkedIn">
            <label for="shareLinkedIn">LinkedIn</label>
          </div>
        </div>
      </div>
    </div>

    <div class="section-block">
      <h3>üë§ –ü—Ä–æ –∞–≤—Ç–æ—Ä–∞ / –ü—Ä–æ –±–ª–æ–≥</h3>
      <p class="section-description">–§–æ—Ç–æ, —ñ–º'—è, —Ç–µ–º–∞—Ç–∏–∫–∏ –±–ª–æ–≥—É, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ</p>
      
      <div class="form-group">
        <label for="authorName">–Ü–º'—è –∞–≤—Ç–æ—Ä–∞ *</label>
        <input type="text" id="authorName" placeholder="–í–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è">
      </div>
      
      <div class="form-group">
        <label for="authorBio">–ë—ñ–æ–≥—Ä–∞—Ñ—ñ—è –∞–≤—Ç–æ—Ä–∞ *</label>
        <textarea id="authorBio" rows="4" placeholder="–†–æ–∑–∫–∞–∂—ñ—Ç—å –ø—Ä–æ —Å–µ–±–µ, –≤–∞—à –¥–æ—Å–≤—ñ–¥, —á–æ–º—É –≤–µ–¥–µ—Ç–µ –±–ª–æ–≥"></textarea>
      </div>
      
      <div class="form-group">
        <label for="blogTopics">–¢–µ–º–∞—Ç–∏–∫–∏ –±–ª–æ–≥—É *</label>
        <textarea id="blogTopics" rows="2" placeholder="–ü—Ä–æ —â–æ –ø–∏—à–µ—Ç–µ, —è–∫—ñ —Ç–µ–º–∏ –≤–∏—Å–≤—ñ—Ç–ª—é—î—Ç–µ"></textarea>
      </div>
      
      <div class="form-group">
        <label for="authorSocial">–°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ –∞–≤—Ç–æ—Ä–∞</label>
        <textarea id="authorSocial" rows="3" placeholder="Facebook: https://facebook.com/yourpage&#10;Instagram: https://instagram.com/yourpage&#10;Twitter: https://twitter.com/yourpage"></textarea>
      </div>
    </div>

    <div class="section-block">
      <h3>üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏</h3>
      <p class="section-description">–§–æ—Ä–º–∞ –∞–±–æ email –¥–ª—è –∑–≤'—è–∑–∫—É. –ú–æ–∂–ª–∏–≤–æ: —Ä–æ–∑—Å–∏–ª–∫–∞, –¥–æ–Ω–∞—Ç–∏, —Ä–µ–∫–ª–∞–º–∞</p>
      
      <div class="form-group">
        <label for="contactMethod">–°–ø–æ—Å—ñ–± –∑–≤'—è–∑–∫—É</label>
        <select id="contactMethod">
          <option value="form">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —Ñ–æ—Ä–º–∞</option>
          <option value="email">–¢—ñ–ª—å–∫–∏ email</option>
          <option value="both">–§–æ—Ä–º–∞ + email</option>
        </select>
      </div>
      
      <div class="form-group">
        <label for="contactEmail">Email –¥–ª—è –∑–≤'—è–∑–∫—É *</label>
        <input type="email" id="contactEmail" placeholder="contact@myblog.com">
      </div>
      
      <div class="form-group">
        <label for="contactFormTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º–∏ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É</label>
        <input type="text" id="contactFormTitle" placeholder="–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑—ñ –º–Ω–æ—é, –ù–∞–ø–∏—Å–∞—Ç–∏ –∞–≤—Ç–æ—Ä—É">
      </div>
      
      <div class="additional-features">
        <h4>–î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:</h4>
        <div class="feature-list">
          <div class="feature-item">
            <input type="checkbox" id="enableNewsletter">
            <label for="enableNewsletter">–†–æ–∑—Å–∏–ª–∫–∞ –Ω–æ–≤–∏—Ö —Å—Ç–∞—Ç–µ–π</label>
          </div>
          <div class="feature-item">
            <input type="checkbox" id="enableDonations">
            <label for="enableDonations">–ö–Ω–æ–ø–∫–∞ –¥–æ–Ω–∞—Ç—ñ–≤</label>
          </div>
          <div class="feature-item">
            <input type="checkbox" id="enableAdvertising">
            <label for="enableAdvertising">–ú—ñ—Å—Ü—è –¥–ª—è —Ä–µ–∫–ª–∞–º–∏</label>
          </div>
          <div class="feature-item">
            <input type="checkbox" id="enableRSS" checked>
            <label for="enableRSS">RSS –ø—ñ–¥–ø–∏—Å–∫–∞</label>
          </div>
        </div>
      </div>
    </div>
  `;
}

// Helper functions for dynamic content
function addBenefit() {
  const list = document.getElementById('benefitsList');
  const item = document.createElement('div');
  item.className = 'benefit-item';
  item.innerHTML = `
    <input type="text" placeholder="–ü–µ—Ä–µ–≤–∞–≥–∞" class="benefit-title">
    <textarea placeholder="–û–ø–∏—Å –ø–µ—Ä–µ–≤–∞–≥–∏" rows="2" class="benefit-desc"></textarea>
    <button type="button" class="remove-item" onclick="removeItem(this)">√ó</button>
  `;
  list.appendChild(item);
  updateOrderSummary();
}

function addService() {
  const list = document.getElementById('servicesList');
  const item = document.createElement('div');
  item.className = 'service-item';
  item.innerHTML = `
    <input type="text" placeholder="–ù–∞–∑–≤–∞ –ø–æ—Å–ª—É–≥–∏" class="service-name">
    <textarea placeholder="–û–ø–∏—Å —Ç–∞ —Ü—ñ–Ω–∞" rows="2" class="service-desc"></textarea>
    <button type="button" class="remove-item" onclick="removeItem(this)">√ó</button>
  `;
  list.appendChild(item);
  updateOrderSummary();
}

function addTestimonial() {
  const list = document.getElementById('testimonialsList');
  const item = document.createElement('div');
  item.className = 'testimonial-item';
  item.innerHTML = `
    <input type="text" placeholder="–Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞" class="testimonial-name">
    <input type="text" placeholder="–ö–æ–º–ø–∞–Ω—ñ—è / –ü–æ—Å–∞–¥–∞" class="testimonial-company">
    <textarea placeholder="–¢–µ–∫—Å—Ç –≤—ñ–¥–≥—É–∫—É" rows="3" class="testimonial-text"></textarea>
    <button type="button" class="remove-item" onclick="removeItem(this)">√ó</button>
  `;
  list.appendChild(item);
  updateOrderSummary();
}

function addPortfolioItem() {
  const list = document.getElementById('portfolioList');
  const item = document.createElement('div');
  item.className = 'portfolio-item';
  item.innerHTML = `
    <input type="text" placeholder="–ù–∞–∑–≤–∞ –ø—Ä–æ—î–∫—Ç—É" class="portfolio-name">
    <textarea placeholder="–û–ø–∏—Å –ø—Ä–æ—î–∫—Ç—É" rows="2" class="portfolio-desc"></textarea>
    <button type="button" class="remove-item" onclick="removeItem(this)">√ó</button>
  `;
  list.appendChild(item);
  updateOrderSummary();
}

function addFAQItem() {
  const list = document.getElementById('faqList');
  const item = document.createElement('div');
  item.className = 'faq-item';
  item.innerHTML = `
    <input type="text" placeholder="–ó–∞–ø–∏—Ç–∞–Ω–Ω—è" class="faq-question">
    <textarea placeholder="–í—ñ–¥–ø–æ–≤—ñ–¥—å" rows="2" class="faq-answer"></textarea>
    <button type="button" class="remove-item" onclick="removeItem(this)">√ó</button>
  `;
  list.appendChild(item);
  updateOrderSummary();
}

function addDetailedService() {
  const list = document.getElementById('servicesDetailedList');
  const item = document.createElement('div');
  item.className = 'service-detailed-item';
  item.innerHTML = `
    <input type="text" placeholder="–ù–∞–∑–≤–∞ –ø–æ—Å–ª—É–≥–∏" class="service-detailed-name">
    <textarea placeholder="–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø–æ—Å–ª—É–≥–∏" rows="3" class="service-detailed-desc"></textarea>
    <input type="text" placeholder="–¶—ñ–Ω–∞ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)" class="service-detailed-price">
    <button type="button" class="remove-item" onclick="removeItem(this)">√ó</button>
  `;
  list.appendChild(item);
  updateOrderSummary();
}

function addTeamMember() {
  const list = document.getElementById('teamList');
  const item = document.createElement('div');
  item.className = 'team-member';
  item.innerHTML = `
    <input type="text" placeholder="–Ü–º'—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞" class="team-name">
    <input type="text" placeholder="–ü–æ—Å–∞–¥–∞" class="team-position">
    <textarea placeholder="–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å" rows="2" class="team-desc"></textarea>
    <button type="button" class="remove-item" onclick="removeItem(this)">√ó</button>
  `;
  list.appendChild(item);
  updateOrderSummary();
}

function addReview() {
  const list = document.getElementById('reviewsList');
  const item = document.createElement('div');
  item.className = 'review-item';
  item.innerHTML = `
    <input type="text" placeholder="–Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞" class="review-name">
    <input type="text" placeholder="–ö–æ–º–ø–∞–Ω—ñ—è" class="review-company">
    <textarea placeholder="–í—ñ–¥–≥—É–∫" rows="3" class="review-text"></textarea>
    <button type="button" class="remove-item" onclick="removeItem(this)">√ó</button>
  `;
  list.appendChild(item);
  updateOrderSummary();
}

function removeItem(button) {
  button.parentElement.remove();
  updateOrderSummary();
}

// Toggle functions for optional sections
function togglePortfolioSection() {
  const checkbox = document.getElementById('includePortfolio');
  const section = document.getElementById('portfolioSection');
  section.style.display = checkbox.checked ? 'block' : 'none';
  updateOrderSummary();
}

function toggleFAQSection() {
  const checkbox = document.getElementById('includeFAQ');
  const section = document.getElementById('faqSection');
  section.style.display = checkbox.checked ? 'block' : 'none';
  updateOrderSummary();
}

function toggleReviewsPage() {
  const checkbox = document.getElementById('includeReviewsPage');
  const section = document.getElementById('reviewsPageSection');
  section.style.display = checkbox.checked ? 'block' : 'none';
  updateOrderSummary();
}

// Setup form listeners
function setupFormListeners(template) {
  // Terms checkbox validation
  const agreeTerms = document.getElementById('agreeTerms');
  if (agreeTerms) {
    agreeTerms.addEventListener('change', function() {
      document.getElementById('finalOrderBtn').disabled = !this.checked;
    });
  }
  
  // Add change listeners to update pricing
  const formElements = document.querySelectorAll('#dynamicSections input, #dynamicSections textarea, #dynamicSections select');
  formElements.forEach(element => {
    element.addEventListener('change', updateOrderSummary);
  });
}

// Update order summary
function updateOrderSummary() {
  if (!selectedTemplate) return;
  
  const config = templateConfigs[selectedTemplate];
  const templateName = config.name;
  let configSummary = '';
  let price = config.price;
  
  switch (selectedTemplate) {
    case 'single':
      const includePortfolio = document.getElementById('includePortfolio')?.checked;
      const includeFAQ = document.getElementById('includeFAQ')?.checked;
      let optionalSections = 0;
      if (includePortfolio) optionalSections++;
      if (includeFAQ) optionalSections++;
      
      configSummary = `–û–¥–Ω–æ—Å—Ç–æ—Ä—ñ–Ω–∫–æ–≤–∏–π —Å–∞–π—Ç –∑ ${6 + optionalSections} —Å–µ–∫—Ü—ñ—è–º–∏`;
      price += optionalSections * 75;
      break;
      
    case 'landing':
      const includeReviews = document.getElementById('includeReviewsPage')?.checked;
      const pagesCount = includeReviews ? 5 : 4;
      configSummary = `${pagesCount} —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–ì–æ–ª–æ–≤–Ω–∞, –ü–æ—Å–ª—É–≥–∏, –ü—Ä–æ –Ω–∞—Å, –ö–æ–Ω—Ç–∞–∫—Ç–∏${includeReviews ? ', –í—ñ–¥–≥—É–∫–∏' : ''})`;
      if (includeReviews) price += 100;
      break;
      
    case 'blog':
      const blogFeatures = document.querySelectorAll('#dynamicSections .feature-item input:checked').length;
      configSummary = `–ë–ª–æ–≥ —Å–∏—Å—Ç–µ–º–∞ –∑ ${blogFeatures} —Ñ—É–Ω–∫—Ü—ñ—è–º–∏`;
      break;
  }
  
  document.getElementById('selectedTemplate').textContent = templateName;
  document.getElementById('configSummary').textContent = configSummary;
  document.getElementById('estimatedPrice').textContent = `–≤—ñ–¥ $${price}`;
}

// Order submission and data collection functions
document.addEventListener('click', function(e) {
  if (e.target && e.target.id === 'finalOrderBtn') {
    handleOrderSubmission();
  }
});

async function handleOrderSubmission() {
  if (!selectedTemplate) {
    alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω');
    return;
  }
  
  if (!document.getElementById('agreeTerms').checked) {
    alert('–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–æ–≥–æ–¥–∏—Ç–∏—Å—è –∑ —É–º–æ–≤–∞–º–∏');
    return;
  }
  
  const orderData = collectOrderData();
  
  if (!validateOrderData(orderData)) {
    return;
  }
  
  try {
    const token = localStorage.getItem('token');
    const response = await fetch(getAPIUrl('/api/orders/update-template'), {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(orderData)
    });
    
    const result = await response.json();
    
    if (response.ok) {
      alert('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ! –ú–∏ –∑–≤\'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.');
    } else {
      alert('–ü–æ–º–∏–ª–∫–∞: ' + result.error);
    }
  } catch (error) {
    console.error('Order submission error:', error);
    alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
  }
}

function collectOrderData() {
  const config = templateConfigs[selectedTemplate];
  let blocks = { type: selectedTemplate };
  
  switch (selectedTemplate) {
    case 'single':
      blocks = collectOnePageData();
      break;
    case 'landing':
      blocks = collectLandingData();
      break;
    case 'blog':
      blocks = collectBlogData();
      break;
  }
  
  return {
    template: selectedTemplate,
    blocks: blocks
  };
}

function collectOnePageData() {
  // Collect benefits
  const benefits = [];
  document.querySelectorAll('.benefit-item').forEach(item => {
    const title = item.querySelector('.benefit-title')?.value?.trim();
    const desc = item.querySelector('.benefit-desc')?.value?.trim();
    if (title) benefits.push({ title, description: desc });
  });
  
  // Collect services
  const services = [];
  document.querySelectorAll('.service-item').forEach(item => {
    const name = item.querySelector('.service-name')?.value?.trim();
    const desc = item.querySelector('.service-desc')?.value?.trim();
    if (name) services.push({ name, description: desc });
  });
  
  // Collect testimonials
  const testimonials = [];
  document.querySelectorAll('.testimonial-item').forEach(item => {
    const name = item.querySelector('.testimonial-name')?.value?.trim();
    const company = item.querySelector('.testimonial-company')?.value?.trim();
    const text = item.querySelector('.testimonial-text')?.value?.trim();
    if (name && text) testimonials.push({ name, company, text });
  });
  
  return {
    type: 'onepage',
    hero: {
      title: document.getElementById('heroTitle')?.value || '',
      subtitle: document.getElementById('heroSubtitle')?.value || '',
      buttonText: document.getElementById('heroButton')?.value || ''
    },
    about: {
      title: document.getElementById('aboutTitle')?.value || '',
      text: document.getElementById('aboutText')?.value || ''
    },
    benefits: {
      title: document.getElementById('benefitsTitle')?.value || '',
      items: benefits
    },
    services: {
      title: document.getElementById('servicesTitle')?.value || '',
      items: services
    },
    testimonials: {
      title: document.getElementById('testimonialsTitle')?.value || '',
      items: testimonials
    },
    portfolio: document.getElementById('includePortfolio')?.checked ? {
      title: document.getElementById('portfolioTitle')?.value || '',
      items: collectPortfolioItems()
    } : null,
    faq: document.getElementById('includeFAQ')?.checked ? {
      title: document.getElementById('faqTitle')?.value || '',
      items: collectFAQItems()
    } : null,
    contact: {
      title: document.getElementById('contactTitle')?.value || '',
      text: document.getElementById('contactText')?.value || '',
      buttonText: document.getElementById('contactButton')?.value || ''
    },
    footer: {
      phone: document.getElementById('footerPhone')?.value || '',
      email: document.getElementById('footerEmail')?.value || '',
      address: document.getElementById('footerAddress')?.value || '',
      socialLinks: document.getElementById('socialLinks')?.value || '',
      copyright: document.getElementById('copyrightText')?.value || ''
    }
  };
}

function collectLandingData() {
  return {
    type: 'landing',
    home: {
      heroTitle: document.getElementById('homeHeroTitle')?.value || '',
      heroSubtitle: document.getElementById('homeHeroSubtitle')?.value || '',
      companyBrief: document.getElementById('homeCompanyBrief')?.value || '',
      advantages: document.getElementById('homeAdvantages')?.value || '',
      ctaButton: document.getElementById('homeCTAButton')?.value || ''
    },
    services: {
      title: document.getElementById('servicesPageTitle')?.value || '',
      intro: document.getElementById('servicesPageIntro')?.value || '',
      items: collectDetailedServices(),
      orderButton: document.getElementById('servicesOrderButton')?.value || ''
    },
    about: {
      title: document.getElementById('aboutPageTitle')?.value || '',
      history: document.getElementById('companyHistory')?.value || '',
      values: document.getElementById('companyValues')?.value || '',
      team: collectTeamMembers()
    },
    contacts: {
      title: document.getElementById('contactsPageTitle')?.value || '',
      phone: document.getElementById('contactsPhone')?.value || '',
      email: document.getElementById('contactsEmail')?.value || '',
      address: document.getElementById('contactsAddress')?.value || '',
      hours: document.getElementById('contactsHours')?.value || '',
      social: document.getElementById('contactsSocial')?.value || ''
    },
    reviews: document.getElementById('includeReviewsPage')?.checked ? {
      title: document.getElementById('reviewsPageTitle')?.value || '',
      items: collectReviews()
    } : null
  };
}

function collectBlogData() {
  const features = [];
  document.querySelectorAll('#dynamicSections .feature-item input:checked').forEach(checkbox => {
    features.push(checkbox.id);
  });
  
  return {
    type: 'blog',
    home: {
      title: document.getElementById('blogTitle')?.value || '',
      subtitle: document.getElementById('blogSubtitle')?.value || '',
      categories: document.getElementById('blogCategories')?.value || '',
      postsPerPage: document.getElementById('postsPerPage')?.value || '10'
    },
    article: {
      authorName: document.getElementById('articleAuthorName')?.value || '',
      dateFormat: document.getElementById('dateFormat')?.value || 'dd.mm.yyyy'
    },
    author: {
      name: document.getElementById('authorName')?.value || '',
      bio: document.getElementById('authorBio')?.value || '',
      topics: document.getElementById('blogTopics')?.value || '',
      social: document.getElementById('authorSocial')?.value || ''
    },
    contacts: {
      method: document.getElementById('contactMethod')?.value || 'form',
      email: document.getElementById('contactEmail')?.value || '',
      formTitle: document.getElementById('contactFormTitle')?.value || ''
    },
    features: features
  };
}

// Helper collection functions
function collectPortfolioItems() {
  const items = [];
  document.querySelectorAll('.portfolio-item').forEach(item => {
    const name = item.querySelector('.portfolio-name')?.value?.trim();
    const desc = item.querySelector('.portfolio-desc')?.value?.trim();
    if (name) items.push({ name, description: desc });
  });
  return items;
}

function collectFAQItems() {
  const items = [];
  document.querySelectorAll('.faq-item').forEach(item => {
    const question = item.querySelector('.faq-question')?.value?.trim();
    const answer = item.querySelector('.faq-answer')?.value?.trim();
    if (question && answer) items.push({ question, answer });
  });
  return items;
}

function collectDetailedServices() {
  const items = [];
  document.querySelectorAll('.service-detailed-item').forEach(item => {
    const name = item.querySelector('.service-detailed-name')?.value?.trim();
    const desc = item.querySelector('.service-detailed-desc')?.value?.trim();
    const price = item.querySelector('.service-detailed-price')?.value?.trim();
    if (name) items.push({ name, description: desc, price });
  });
  return items;
}

function collectTeamMembers() {
  const items = [];
  document.querySelectorAll('.team-member').forEach(item => {
    const name = item.querySelector('.team-name')?.value?.trim();
    const position = item.querySelector('.team-position')?.value?.trim();
    const desc = item.querySelector('.team-desc')?.value?.trim();
    if (name) items.push({ name, position, description: desc });
  });
  return items;
}

function collectReviews() {
  const items = [];
  document.querySelectorAll('.review-item').forEach(item => {
    const name = item.querySelector('.review-name')?.value?.trim();
    const company = item.querySelector('.review-company')?.value?.trim();
    const text = item.querySelector('.review-text')?.value?.trim();
    if (name && text) items.push({ name, company, text });
  });
  return items;
}

// Validation function
function validateOrderData(data) {
  switch (selectedTemplate) {
    case 'single':
      if (!data.blocks.hero.title || !data.blocks.hero.subtitle || !data.blocks.footer.phone || !data.blocks.footer.email) {
        showAlert('–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: –∑–∞–≥–æ–ª–æ–≤–æ–∫ Hero, –ø—ñ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫, —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–∞ email —É —Ñ—É—Ç–µ—Ä—ñ', 'warning', '–ù–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è');
        return false;
      }
      break;
      
    case 'landing':
      if (!data.blocks.home.heroTitle || !data.blocks.contacts.phone || !data.blocks.contacts.email) {
        showAlert('–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏, —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–∞ email', 'warning', '–ù–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è');
        return false;
      }
      break;
      
    case 'blog':
      if (!data.blocks.home.title || !data.blocks.author.name || !data.blocks.contacts.email) {
        showAlert('–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: –Ω–∞–∑–≤—É –±–ª–æ–≥—É, —ñ–º\'—è –∞–≤—Ç–æ—Ä–∞ —Ç–∞ email', 'warning', '–ù–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è');
        return false;
      }
      break;
  }
  
  return true;
}

// Password change functionality
function openPasswordModal() {
  console.log('openPasswordModal called');
  const modal = document.getElementById('passwordModal');
  console.log('Modal element:', modal);
  
  if (modal) {
    modal.style.display = 'block';
    modal.style.zIndex = '1001';
    modal.classList.add('show');
    console.log('Password modal opened successfully');
    
    // Clear form
    const form = document.getElementById('passwordForm');
    if (form) {
      form.reset();
    }
    
    // Focus first input
    const firstInput = modal.querySelector('input[type="password"]');
    if (firstInput) {
      setTimeout(() => firstInput.focus(), 100);
    }
  } else {
    console.error('Password modal not found in DOM');
    
    // Debug: list all elements with 'modal' in their id
    const allElements = document.querySelectorAll('[id*="modal"], [id*="Modal"]');
    console.log('All modal-related elements:', Array.from(allElements).map(el => el.id));
  }
}

function closePasswordModal() {
  console.log('closePasswordModal called');
  const modal = document.getElementById('passwordModal');
  const form = document.getElementById('passwordForm');
  
  if (modal) {
    modal.style.display = 'none';
    modal.classList.remove('show');
  }
  if (form) {
    form.reset();
  }
}

// Popup Modal System
let popupCallback = null;
let popupInputCallback = null;

function showPopup(type, title, message, options = {}) {
  const modal = document.getElementById('popupModal');
  const icon = document.getElementById('popupIcon');
  const titleEl = document.getElementById('popupTitle');
  const messageEl = document.getElementById('popupMessage');
  const inputContainer = document.getElementById('popupInput');
  const inputField = document.getElementById('popupInputField');
  const cancelBtn = document.getElementById('popupCancelBtn');
  const confirmBtn = document.getElementById('popupConfirmBtn');
  
  // Set icon based on type
  icon.className = `popup-icon ${type}`;
  switch(type) {
    case 'success':
      icon.innerHTML = '‚úì';
      break;
    case 'error':
      icon.innerHTML = '‚úï';
      break;
    case 'warning':
      icon.innerHTML = '‚ö†';
      break;
    case 'info':
      icon.innerHTML = 'i';
      break;
    case 'question':
      icon.innerHTML = '?';
      break;
    default:
      icon.innerHTML = 'i';
  }
  
  titleEl.textContent = title;
  messageEl.textContent = message;
  
  // Configure buttons
  if (options.showCancel !== false) {
    cancelBtn.style.display = 'block';
    cancelBtn.textContent = options.cancelText || '–°–∫–∞—Å—É–≤–∞—Ç–∏';
  } else {
    cancelBtn.style.display = 'none';
  }
  
  confirmBtn.textContent = options.confirmText || 'OK';
  
  // Handle input field
  if (options.showInput) {
    inputContainer.style.display = 'block';
    inputField.placeholder = options.inputPlaceholder || '';
    inputField.value = options.inputValue || '';
    inputField.focus();
  } else {
    inputContainer.style.display = 'none';
  }
  
  // Store callback
  popupCallback = options.callback;
  popupInputCallback = options.inputCallback;
  
  modal.style.display = 'block';
  
  // Focus confirm button if no input
  if (!options.showInput) {
    confirmBtn.focus();
  }
}

function closePopup() {
  const modal = document.getElementById('popupModal');
  modal.style.display = 'none';
  popupCallback = null;
  popupInputCallback = null;
}

function confirmPopup() {
  const inputField = document.getElementById('popupInputField');
  const inputContainer = document.getElementById('popupInput');
  
  if (inputContainer.style.display !== 'none' && popupInputCallback) {
    popupInputCallback(inputField.value);
  } else if (popupCallback) {
    popupCallback(true);
  }
  
  closePopup();
}

// Custom alert function
function showAlert(message, type = 'info', title = '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è') {
  return new Promise((resolve) => {
    showPopup(type, title, message, {
      showCancel: false,
      callback: resolve
    });
  });
}

// Custom confirm function
function showConfirm(message, title = '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è') {
  return new Promise((resolve) => {
    showPopup('question', title, message, {
      showCancel: true,
      confirmText: '–¢–∞–∫',
      cancelText: '–ù—ñ',
      callback: resolve
    });
  });
}

// Load user order function
async function loadUserOrder() {
  try {
    const token = localStorage.getItem('token');
    const response = await fetch(getAPIUrl('/api/orders/my-order'), {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (response.ok) {
      const order = await response.json();
      currentOrder = order;
      
      // Check if user has a specific tariff and filter templates
      if (order && order.selectedTemplate) {
        // User already has an order with template
        filterTemplatesByTariff(order.selectedTemplate);
        
        // Load saved data into forms
        if (order.blocks) {
          loadTemplateData({blocks: order.blocks});
        }
      } else {
        // New user, show all templates
        setupTemplateSelection();
      }
    } else if (response.status === 404) {
      // No existing order found, setup normal template selection
      console.log('No existing order found, setting up template selection');
      setupTemplateSelection();
    } else {
      // Other error, setup normal template selection
      console.error('Error loading order:', response.status);
      setupTemplateSelection();
    }
  } catch (error) {
    console.error('Error loading user order:', error);
    setupTemplateSelection();
  }
}

// Load template data into forms
function loadTemplateData(templateData) {
  if (!templateData || !templateData.blocks) return;
  
  const blocks = templateData.blocks;
  
  try {
    switch (blocks.type) {
      case 'onepage':
        loadOnePageData(blocks);
        break;
      case 'landing':
        loadLandingData(blocks);
        break;
      case 'blog':
        loadBlogData(blocks);
        break;
    }
  } catch (error) {
    console.error('Error loading template data:', error);
  }
}

// Load one page data
function loadOnePageData(blocks) {
  // Hero section
  if (blocks.hero) {
    setValue('heroTitle', blocks.hero.title);
    setValue('heroSubtitle', blocks.hero.subtitle);
    setValue('heroButton', blocks.hero.buttonText);
  }
  
  // About section
  if (blocks.about) {
    setValue('aboutTitle', blocks.about.title);
    setValue('aboutText', blocks.about.text);
  }
  
  // Benefits section
  if (blocks.benefits) {
    setValue('benefitsTitle', blocks.benefits.title);
    loadListItems('benefitsList', blocks.benefits.items, ['title', 'description'], 'benefit');
  }
  
  // Services section
  if (blocks.services) {
    setValue('servicesTitle', blocks.services.title);
    loadListItems('servicesList', blocks.services.items, ['name', 'description'], 'service');
  }
  
  // Testimonials section
  if (blocks.testimonials) {
    setValue('testimonialsTitle', blocks.testimonials.title);
    loadListItems('testimonialsList', blocks.testimonials.items, ['name', 'company', 'text'], 'testimonial');
  }
  
  // Contact section
  if (blocks.contact) {
    setValue('contactTitle', blocks.contact.title);
    setValue('contactText', blocks.contact.text);
    setValue('contactButton', blocks.contact.buttonText);
  }
  
  // Footer section
  if (blocks.footer) {
    setValue('footerPhone', blocks.footer.phone);
    setValue('footerEmail', blocks.footer.email);
    setValue('footerAddress', blocks.footer.address);
    setValue('socialLinks', blocks.footer.socialLinks);
    setValue('copyrightText', blocks.footer.copyright);
  }
  
  // Optional sections
  if (blocks.portfolio) {
    setCheckbox('includePortfolio', true);
    togglePortfolioSection();
    setValue('portfolioTitle', blocks.portfolio.title);
    loadListItems('portfolioList', blocks.portfolio.items, ['name', 'description'], 'portfolio');
  }
  
  if (blocks.faq) {
    setCheckbox('includeFAQ', true);
    toggleFAQSection();
    setValue('faqTitle', blocks.faq.title);
    loadListItems('faqList', blocks.faq.items, ['question', 'answer'], 'faq');
  }
}

// Helper function to set input values
function setValue(id, value) {
  const element = document.getElementById(id);
  if (element && value) {
    element.value = value;
  }
}

// Helper function to set checkbox values
function setCheckbox(id, checked) {
  const element = document.getElementById(id);
  if (element) {
    element.checked = checked;
  }
}

// Helper function to load list items
function loadListItems(containerId, items, fields, itemClass) {
  const container = document.getElementById(containerId);
  if (!container || !items || !Array.isArray(items)) return;
  
  // Clear existing items except the first one
  const existingItems = container.querySelectorAll(`.${itemClass}-item`);
  for (let i = 1; i < existingItems.length; i++) {
    existingItems[i].remove();
  }
  
  // Fill items
  items.forEach((item, index) => {
    let itemElement;
    if (index === 0) {
      // Use existing first item
      itemElement = container.querySelector(`.${itemClass}-item`);
    } else {
      // Create new item
      itemElement = container.querySelector(`.${itemClass}-item`).cloneNode(true);
      container.appendChild(itemElement);
    }
    
    if (itemElement) {
      fields.forEach(field => {
        const input = itemElement.querySelector(`.${itemClass}-${field}`);
        if (input && item[field]) {
          input.value = item[field];
        }
      });
    }
  });
}

// Logout functionality
function logout() {
  localStorage.removeItem('token');
  localStorage.removeItem('user');
  window.location.href = '/';
}

// Make functions globally available
window.openPasswordModal = openPasswordModal;
window.closePasswordModal = closePasswordModal;
window.showPopup = showPopup;
window.closePopup = closePopup;
window.confirmPopup = confirmPopup;
window.showAlert = showAlert;
window.showConfirm = showConfirm;
window.loadUserOrder = loadUserOrder;
window.logout = logout;

